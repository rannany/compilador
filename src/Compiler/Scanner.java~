/* The following code was generated by JFlex 1.7.0 */

package Compiler;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/rannany/compilador/jflex/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\13\1\14\1\14\1\13\22\0\1\22\6\0\1\12"+
    "\2\21\1\11\1\4\1\62\1\4\1\10\1\20\1\6\1\54\2\7"+
    "\1\57\1\7\1\55\3\7\1\1\1\61\1\3\1\2\1\3\2\0"+
    "\32\15\1\21\1\0\1\21\1\23\1\15\1\0\1\24\1\42\1\33"+
    "\1\26\1\34\1\45\1\43\1\52\1\37\1\47\1\51\1\44\1\32"+
    "\1\25\1\35\1\50\1\60\1\27\1\31\1\36\1\46\1\40\1\41"+
    "\1\53\1\30\1\56\1\16\1\5\1\17\7\0\1\14\u1fa2\0\1\14"+
    "\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\2\5\1\6\1\3"+
    "\1\1\1\4\1\7\1\1\1\3\1\1\26\7\1\10"+
    "\1\0\1\7\2\0\1\11\3\0\2\12\1\13\12\7"+
    "\1\14\26\7\1\15\4\7\1\16\1\7\1\17\1\7"+
    "\1\20\1\7\1\21\33\7\1\22\1\0\2\23\1\24"+
    "\1\25\1\26\2\7\1\27\7\7\1\30\1\31\3\7"+
    "\1\32\11\7\1\33\6\7\1\34\1\7\1\35\1\7"+
    "\1\36\11\7\1\37\16\7\1\40\16\7\1\41\1\42"+
    "\15\7\1\43\1\7\1\44\1\11\4\7\1\45\1\46"+
    "\6\7\1\47\1\50\21\7\1\51\3\7\1\52\1\53"+
    "\2\7\1\54\1\7\1\55\7\7\1\56\1\57\10\7"+
    "\1\60\1\61\2\7\1\62\3\7\1\63\6\7\1\64"+
    "\4\7\1\65\1\66\10\7\1\67\2\7\1\70\30\7"+
    "\1\71\1\72\15\7\1\73\2\7\1\74\4\7\1\75"+
    "\1\7\1\76\1\77\1\7\1\100\2\7\1\101\3\7"+
    "\1\102\1\103\4\7\1\104\10\7\1\105\6\7\1\106"+
    "\1\107\1\110\1\111\2\7\1\112\5\7\1\113\1\114"+
    "\1\115\1\116\13\7\1\117\3\7\1\120\4\7\1\121"+
    "\13\7\1\122\3\7\1\123\1\124\4\7\1\125\6\7"+
    "\1\126\6\7\1\127\2\7\1\130\3\7\1\131\12\7"+
    "\1\132\1\133\1\134\1\135\2\7\1\136\1\137\1\140"+
    "\2\7\1\141\4\7\1\142\4\7\1\143\1\7\1\144"+
    "\2\7\1\145\1\7\1\146\1\147\2\7\1\150\1\151"+
    "\1\152\1\153\1\7\1\154\1\155\2\7\1\156\1\157"+
    "\3\7\1\160\1\161\1\162\1\163\1\164\3\7\1\165"+
    "\2\7\1\166\1\167\3\7\1\170\3\7\1\171\1\7"+
    "\1\172\1\173\1\174\1\7\1\175\1\176\1\177\3\7"+
    "\1\200\1\201\1\7\1\202\2\7\1\203\3\7\1\204"+
    "\1\7\1\205\1\7\1\206\1\207";

  private static int [] zzUnpackAction() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\u0132"+
    "\0\63\0\63\0\u0165\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\63\0\377"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u01cb\0\u01cb"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0198\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0198\0\u0fbd\0\u0198\0\u0ff0\0\u1023\0\u1056\0\u0198\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u06f9\0\u15ea\0\u15ea\0\u161d\0\u15ea\0\u15ea"+
    "\0\u0198\0\u1650\0\u1683\0\u0198\0\u16b6\0\u16e9\0\u171c\0\u174f"+
    "\0\u1782\0\u17b5\0\u17e8\0\u0198\0\u0198\0\u181b\0\u184e\0\u1881"+
    "\0\u0198\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6"+
    "\0\u1a19\0\u1a4c\0\u0198\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u0198\0\u1bb1\0\u0198\0\u1be4\0\u0198\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u0198"+
    "\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f"+
    "\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u0198\0\u26a6\0\u15ea\0\u161d"+
    "\0\u26d9\0\u270c\0\u273f\0\u2772\0\u0198\0\u0198\0\u27a5\0\u27d8"+
    "\0\u280b\0\u283e\0\u2871\0\u28a4\0\u0198\0\u0198\0\u28d7\0\u290a"+
    "\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2"+
    "\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u0198"+
    "\0\u2c3a\0\u2c6d\0\u2ca0\0\u0198\0\u0198\0\u2cd3\0\u2d06\0\u0198"+
    "\0\u2d39\0\u0198\0\u2d6c\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b"+
    "\0\u2e9e\0\u0198\0\u0198\0\u2ed1\0\u2f04\0\u2f37\0\u2f6a\0\u2f9d"+
    "\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u0198\0\u309c\0\u30cf\0\u3102"+
    "\0\u3135\0\u3168\0\u319b\0\u0198\0\u31ce\0\u3201\0\u3234\0\u3267"+
    "\0\u329a\0\u32cd\0\u0198\0\u3300\0\u3333\0\u3366\0\u3399\0\u0198"+
    "\0\u0198\0\u33cc\0\u33ff\0\u3432\0\u3465\0\u3498\0\u34cb\0\u34fe"+
    "\0\u3531\0\u0198\0\u3564\0\u3597\0\u0198\0\u35ca\0\u35fd\0\u3630"+
    "\0\u3663\0\u3696\0\u36c9\0\u36fc\0\u372f\0\u3762\0\u3795\0\u37c8"+
    "\0\u37fb\0\u382e\0\u3861\0\u3894\0\u38c7\0\u38fa\0\u392d\0\u3960"+
    "\0\u3993\0\u39c6\0\u39f9\0\u3a2c\0\u3a5f\0\u0198\0\u0198\0\u3a92"+
    "\0\u3ac5\0\u3af8\0\u3b2b\0\u3b5e\0\u3b91\0\u3bc4\0\u3bf7\0\u3c2a"+
    "\0\u3c5d\0\u3c90\0\u3cc3\0\u3cf6\0\u0198\0\u3d29\0\u3d5c\0\u0198"+
    "\0\u3d8f\0\u3dc2\0\u3df5\0\u3e28\0\u0198\0\u3e5b\0\u0198\0\u0198"+
    "\0\u3e8e\0\u0198\0\u3ec1\0\u3ef4\0\u0198\0\u3f27\0\u3f5a\0\u3f8d"+
    "\0\u0198\0\u0198\0\u3fc0\0\u3ff3\0\u4026\0\u4059\0\u0198\0\u408c"+
    "\0\u40bf\0\u40f2\0\u4125\0\u4158\0\u418b\0\u41be\0\u41f1\0\u4224"+
    "\0\u4257\0\u428a\0\u42bd\0\u42f0\0\u4323\0\u4356\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u4389\0\u43bc\0\u0198\0\u43ef\0\u4422\0\u4455"+
    "\0\u4488\0\u44bb\0\u0198\0\u0198\0\u0198\0\u0198\0\u44ee\0\u4521"+
    "\0\u4554\0\u4587\0\u45ba\0\u45ed\0\u4620\0\u4653\0\u4686\0\u46b9"+
    "\0\u46ec\0\u0198\0\u471f\0\u4752\0\u4785\0\u0198\0\u47b8\0\u47eb"+
    "\0\u481e\0\u4851\0\u0198\0\u4884\0\u48b7\0\u48ea\0\u491d\0\u4950"+
    "\0\u4983\0\u49b6\0\u49e9\0\u4a1c\0\u4a4f\0\u4a82\0\u0198\0\u4ab5"+
    "\0\u4ae8\0\u4b1b\0\u0198\0\u0198\0\u4b4e\0\u4b81\0\u4bb4\0\u4be7"+
    "\0\u0198\0\u4c1a\0\u4c4d\0\u4c80\0\u4cb3\0\u4ce6\0\u4d19\0\u0198"+
    "\0\u4d4c\0\u4d7f\0\u4db2\0\u4de5\0\u4e18\0\u4e4b\0\u0198\0\u4e7e"+
    "\0\u4eb1\0\u0198\0\u4ee4\0\u4f17\0\u4f4a\0\u0198\0\u4f7d\0\u4fb0"+
    "\0\u4fe3\0\u5016\0\u5049\0\u507c\0\u50af\0\u50e2\0\u5115\0\u5148"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u517b\0\u51ae\0\u0198\0\u0198"+
    "\0\u0198\0\u51e1\0\u5214\0\u0198\0\u5247\0\u527a\0\u52ad\0\u52e0"+
    "\0\u0198\0\u5313\0\u5346\0\u5379\0\u53ac\0\u0198\0\u53df\0\u0198"+
    "\0\u5412\0\u5445\0\u0198\0\u5478\0\u0198\0\u0198\0\u54ab\0\u54de"+
    "\0\u0198\0\u0198\0\u0198\0\u0198\0\u5511\0\u0198\0\u0198\0\u5544"+
    "\0\u5577\0\u0198\0\u0198\0\u55aa\0\u55dd\0\u5610\0\u0198\0\u0198"+
    "\0\u0198\0\u0198\0\u0198\0\u5643\0\u5676\0\u56a9\0\u0198\0\u56dc"+
    "\0\u570f\0\u0198\0\u0198\0\u5742\0\u5775\0\u57a8\0\u0198\0\u57db"+
    "\0\u580e\0\u5841\0\u0198\0\u5874\0\u0198\0\u0198\0\u0198\0\u58a7"+
    "\0\u0198\0\u0198\0\u0198\0\u58da\0\u590d\0\u5940\0\u0198\0\u0198"+
    "\0\u5973\0\u0198\0\u59a6\0\u59d9\0\u0198\0\u5a0c\0\u5a3f\0\u5a72"+
    "\0\u0198\0\u5aa5\0\u0198\0\u5ad8\0\u0198\0\u0198";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\15\1\16\1\2\1\17"+
    "\1\11\1\14\1\20\1\21\1\22\1\23\1\24\1\15"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\15\1\43"+
    "\1\15\1\44\1\45\2\10\1\15\1\10\1\46\1\2"+
    "\1\11\65\0\1\47\66\0\1\7\1\50\44\0\2\50"+
    "\1\0\1\50\10\0\1\15\2\51\5\0\1\15\6\0"+
    "\30\15\2\51\1\15\1\51\1\15\10\0\2\50\1\52"+
    "\43\0\2\50\1\0\1\50\11\0\2\10\1\52\43\0"+
    "\2\10\1\0\1\10\3\0\12\53\1\54\2\0\44\53"+
    "\1\55\1\56\5\0\3\15\5\0\1\15\6\0\35\15"+
    "\2\0\13\57\2\0\2\57\1\60\43\57\20\0\1\61"+
    "\47\0\1\62\7\0\1\62\6\0\30\62\2\0\1\62"+
    "\1\0\1\62\7\0\3\15\5\0\1\15\6\0\1\15"+
    "\1\63\1\15\1\64\1\15\1\65\10\15\1\66\1\15"+
    "\1\67\14\15\7\0\3\15\5\0\1\15\6\0\1\70"+
    "\7\15\1\71\1\72\1\15\1\73\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\74\1\75\1\15\1\76"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\10\15\1\77"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\1\100\5\15"+
    "\1\101\1\15\1\102\1\103\1\104\1\105\10\15\1\106"+
    "\1\15\1\107\6\15\7\0\3\15\5\0\1\15\6\0"+
    "\10\15\1\110\1\111\23\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\112\1\15\1\113\6\15\1\114\2\15\1\115"+
    "\5\15\1\116\1\15\1\117\1\15\1\120\6\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\121\16\15\1\122"+
    "\6\15\1\123\5\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\124\6\15\1\125\1\15\1\126\1\15\1\127"+
    "\1\15\1\130\1\131\13\15\7\0\3\15\5\0\1\15"+
    "\6\0\4\15\1\132\4\15\1\133\14\15\1\134\6\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\15\1\135\7\15"+
    "\1\136\7\15\1\137\13\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\140\12\15\1\141\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\142\5\15\1\143\1\15\1\144"+
    "\12\15\1\145\6\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\146\1\147\3\15\1\150\1\151\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\152\1\153\23\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\154\10\15\1\155"+
    "\23\15\7\0\3\15\5\0\1\15\6\0\1\156\10\15"+
    "\1\157\1\15\1\160\6\15\1\161\12\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\15\1\162\3\15\1\163\27\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\164\2\15\1\165"+
    "\14\15\1\166\1\15\1\167\12\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\170\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\171\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\15\15\1\172\17\15\7\0\1\15\2\51"+
    "\1\52\4\0\1\15\6\0\30\15\2\51\1\15\1\51"+
    "\1\15\10\0\2\173\44\0\2\173\1\0\1\173\3\0"+
    "\12\174\1\175\2\0\60\174\1\176\2\0\60\174\1\177"+
    "\2\0\60\174\1\200\2\0\46\174\13\61\2\0\46\61"+
    "\5\0\3\62\5\0\1\62\6\0\35\62\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\201\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\3\15\1\202\31\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\203\1\204\26\15\7\0"+
    "\3\15\5\0\1\15\6\0\5\15\1\205\27\15\7\0"+
    "\3\15\5\0\1\15\6\0\13\15\1\206\21\15\7\0"+
    "\3\15\5\0\1\15\6\0\6\15\1\207\26\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\210\34\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\211\1\212\1\15\1\213"+
    "\4\15\1\214\22\15\7\0\3\15\5\0\1\15\6\0"+
    "\20\15\1\215\14\15\7\0\3\15\5\0\1\15\6\0"+
    "\21\15\1\216\13\15\7\0\3\15\5\0\1\15\6\0"+
    "\15\15\1\217\4\15\1\220\12\15\7\0\3\15\5\0"+
    "\1\15\6\0\14\15\1\221\20\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\222\4\15\1\223\1\15\1\224\3\15"+
    "\1\225\3\15\1\226\4\15\1\227\10\15\7\0\3\15"+
    "\5\0\1\15\6\0\14\15\1\230\4\15\1\231\13\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\232\34\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\233\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\21\15\1\234\13\15\7\0"+
    "\3\15\5\0\1\15\6\0\2\15\1\235\1\236\5\15"+
    "\1\237\23\15\7\0\3\15\5\0\1\15\6\0\1\15"+
    "\1\240\33\15\7\0\3\15\5\0\1\15\6\0\10\15"+
    "\1\241\24\15\7\0\3\15\5\0\1\15\6\0\3\15"+
    "\1\242\5\15\1\243\6\15\1\244\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\245\27\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\246\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\3\15\1\247\1\15\1\250\27\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\251\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\15\1\252\4\15"+
    "\1\253\26\15\7\0\3\15\5\0\1\15\6\0\1\254"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\3\15\1\255"+
    "\31\15\7\0\3\15\5\0\1\15\6\0\24\15\1\256"+
    "\10\15\7\0\3\15\5\0\1\15\6\0\1\257\34\15"+
    "\7\0\3\15\5\0\1\15\6\0\2\15\1\260\17\15"+
    "\1\261\12\15\7\0\3\15\5\0\1\15\6\0\10\15"+
    "\1\262\24\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\263\11\15\1\264\10\15\7\0\3\15\5\0\1\15"+
    "\6\0\26\15\1\265\6\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\266\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\23\15\1\267\11\15\7\0\3\15\5\0\1\15"+
    "\6\0\2\15\1\270\32\15\7\0\3\15\5\0\1\15"+
    "\6\0\24\15\1\271\10\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\272\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\2\15\1\273\7\15\1\274\5\15\1\275\14\15"+
    "\7\0\3\15\5\0\1\15\6\0\7\15\1\276\25\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\277\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\300\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\13\15\1\301\21\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\302\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\12\15\1\303\22\15"+
    "\7\0\3\15\5\0\1\15\6\0\13\15\1\304\21\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\305\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\12\15\1\306\22\15"+
    "\7\0\3\15\5\0\1\15\6\0\17\15\1\307\15\15"+
    "\7\0\3\15\5\0\1\15\6\0\11\15\1\310\23\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\15\1\311\33\15"+
    "\7\0\3\15\5\0\1\15\6\0\12\15\1\312\22\15"+
    "\7\0\3\15\5\0\1\15\6\0\16\15\1\313\16\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\15\1\314\5\15"+
    "\1\315\25\15\7\0\3\15\5\0\1\15\6\0\3\15"+
    "\1\316\31\15\7\0\3\15\5\0\1\15\6\0\3\15"+
    "\1\317\11\15\1\320\17\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\321\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\15\1\322\33\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\323\11\15\1\324\1\325\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\326\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\327\1\15\1\330\25\15"+
    "\7\0\3\15\5\0\1\15\6\0\11\15\1\331\23\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\332\34\15\7\0"+
    "\3\15\5\0\1\15\6\0\16\15\1\333\16\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\334\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\335\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\336\23\15\2\0"+
    "\12\174\1\337\2\0\60\174\1\340\2\0\46\174\5\0"+
    "\3\15\5\0\1\15\6\0\1\341\34\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\342\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\11\15\1\343\23\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\344\34\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\345\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\346\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\347\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\350\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\351\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\352\34\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\15\1\353\33\15\7\0\3\15\5\0\1\15"+
    "\6\0\16\15\1\354\16\15\7\0\3\15\5\0\1\15"+
    "\6\0\2\15\1\355\15\15\1\356\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\22\15\1\357\12\15\7\0\3\15"+
    "\5\0\1\15\6\0\11\15\1\360\23\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\15\1\361\33\15\7\0\3\15"+
    "\5\0\1\15\6\0\13\15\1\362\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\363\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\364\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\365\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\20\15\1\366\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\12\15\1\367\22\15\7\0\3\15"+
    "\5\0\1\15\6\0\7\15\1\370\25\15\7\0\3\15"+
    "\5\0\1\15\6\0\13\15\1\371\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\3\15\1\372\31\15\7\0\3\15"+
    "\5\0\1\15\6\0\17\15\1\373\15\15\7\0\3\15"+
    "\5\0\1\15\6\0\7\15\1\374\25\15\7\0\3\15"+
    "\5\0\1\15\6\0\3\15\1\375\31\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\376\27\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\377\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\u0100\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\7\15\1\u0101\25\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\u0102\4\15\1\u0103\22\15"+
    "\7\0\3\15\5\0\1\15\6\0\24\15\1\u0104\10\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\u0105\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\u0106\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\2\15\1\u0107\32\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\u0108\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\6\15\1\u0109\26\15"+
    "\7\0\3\15\5\0\1\15\6\0\5\15\1\u010a\27\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\u010b\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\u010c\1\u010d"+
    "\23\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u010e"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\3\15\1\u010f"+
    "\31\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0110"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\21\15\1\u0111"+
    "\13\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0112"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\1\15\1\u0113"+
    "\33\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0114"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0115"+
    "\20\15\1\u0116\3\15\7\0\3\15\5\0\1\15\6\0"+
    "\13\15\1\u0117\21\15\7\0\3\15\5\0\1\15\6\0"+
    "\26\15\1\u0118\6\15\7\0\3\15\5\0\1\15\6\0"+
    "\1\u0119\34\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\u011a\22\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\u011b\22\15\7\0\3\15\5\0\1\15\6\0\2\15"+
    "\1\u011c\32\15\7\0\3\15\5\0\1\15\6\0\26\15"+
    "\1\u011d\6\15\7\0\3\15\5\0\1\15\6\0\20\15"+
    "\1\u011e\14\15\7\0\3\15\5\0\1\15\6\0\1\u011f"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0120"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\13\15\1\u0121"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\20\15\1\u0122"+
    "\14\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0123"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\11\15\1\u0124"+
    "\23\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0125"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\17\15\1\u0126"+
    "\15\15\7\0\3\15\5\0\1\15\6\0\1\u0127\34\15"+
    "\7\0\3\15\5\0\1\15\6\0\30\15\1\u0128\4\15"+
    "\7\0\3\15\5\0\1\15\6\0\15\15\1\u0129\17\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\u012a\34\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u012b\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\7\15\1\u012c\25\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u012d\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\13\15\1\u012e\21\15\7\0"+
    "\3\15\5\0\1\15\6\0\6\15\1\u012f\3\15\1\u0130"+
    "\22\15\7\0\3\15\5\0\1\15\6\0\5\15\1\u0131"+
    "\27\15\7\0\3\15\5\0\1\15\6\0\7\15\1\u0132"+
    "\25\15\7\0\3\15\5\0\1\15\6\0\25\15\1\u0133"+
    "\7\15\7\0\3\15\5\0\1\15\6\0\7\15\1\u0134"+
    "\7\15\1\u0135\15\15\7\0\3\15\5\0\1\15\6\0"+
    "\12\15\1\u0136\22\15\7\0\3\15\5\0\1\15\6\0"+
    "\20\15\1\u0137\14\15\7\0\3\15\5\0\1\15\6\0"+
    "\24\15\1\u0138\10\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u0139\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\4\15\1\u013a\30\15\7\0\3\15\5\0\1\15\6\0"+
    "\6\15\1\u013b\26\15\7\0\3\15\5\0\1\15\6\0"+
    "\20\15\1\u013c\14\15\7\0\3\15\5\0\1\15\6\0"+
    "\5\15\1\u013d\27\15\7\0\3\15\5\0\1\15\6\0"+
    "\21\15\1\u013e\13\15\7\0\3\15\5\0\1\15\6\0"+
    "\12\15\1\u013f\22\15\7\0\3\15\5\0\1\15\6\0"+
    "\1\u0140\34\15\7\0\3\15\5\0\1\15\6\0\22\15"+
    "\1\u0141\12\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\u0142\22\15\7\0\3\15\5\0\1\15\6\0\20\15"+
    "\1\u0143\14\15\7\0\3\15\5\0\1\15\6\0\20\15"+
    "\1\u0144\14\15\7\0\3\15\5\0\1\15\6\0\3\15"+
    "\1\u0145\31\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\u0146\22\15\7\0\3\15\5\0\1\15\6\0\5\15"+
    "\1\u0147\27\15\7\0\3\15\5\0\1\15\6\0\1\u0148"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\3\15\1\u0149"+
    "\31\15\7\0\3\15\5\0\1\15\6\0\7\15\1\u014a"+
    "\25\15\7\0\3\15\5\0\1\15\6\0\20\15\1\u014b"+
    "\14\15\7\0\3\15\5\0\1\15\6\0\21\15\1\u014c"+
    "\13\15\7\0\3\15\5\0\1\15\6\0\1\u014d\34\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\15\1\u014e\5\15"+
    "\1\u014f\25\15\7\0\3\15\5\0\1\15\6\0\10\15"+
    "\1\u0150\24\15\7\0\3\15\5\0\1\15\6\0\20\15"+
    "\1\u0151\14\15\7\0\3\15\5\0\1\15\6\0\13\15"+
    "\1\u0152\21\15\7\0\3\15\5\0\1\15\6\0\12\15"+
    "\1\u0153\22\15\7\0\3\15\5\0\1\15\6\0\1\u0154"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\13\15\1\u0155"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\20\15\1\u0156"+
    "\14\15\7\0\3\15\5\0\1\15\6\0\12\15\1\u0157"+
    "\22\15\7\0\3\15\5\0\1\15\6\0\13\15\1\u0158"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u0159"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u015a"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\10\15\1\u015b"+
    "\24\15\7\0\3\15\5\0\1\15\6\0\1\15\1\u015c"+
    "\1\15\1\u015d\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u015e\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u015f\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u0160\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u0161\14\15\1\u0162\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\7\15\1\u0163\25\15\7\0\3\15\5\0"+
    "\1\15\6\0\24\15\1\u0164\10\15\7\0\3\15\5\0"+
    "\1\15\6\0\27\15\1\u0165\5\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u0166\13\15\1\u0167\15\15\7\0"+
    "\3\15\5\0\1\15\6\0\33\15\1\u0168\1\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\u0169\33\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u016a\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u016b\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\22\15\1\u016c\12\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u016d\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\16\15\1\u016e\16\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u016f\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\25\15\1\u0170\7\15\7\0"+
    "\3\15\5\0\1\15\6\0\16\15\1\u0171\16\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\u0172\33\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u0173\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u0174\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u0175\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\13\15\1\u0176\1\15\1\u0177"+
    "\1\u0178\16\15\7\0\3\15\5\0\1\15\6\0\20\15"+
    "\1\u0179\14\15\7\0\3\15\5\0\1\15\6\0\31\15"+
    "\1\u017a\3\15\7\0\3\15\5\0\1\15\6\0\1\u017b"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\3\15\1\u017c"+
    "\31\15\7\0\3\15\5\0\1\15\6\0\12\15\1\u017d"+
    "\22\15\7\0\3\15\5\0\1\15\6\0\13\15\1\u017e"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\20\15\1\u017f"+
    "\14\15\7\0\3\15\5\0\1\15\6\0\24\15\1\u0180"+
    "\10\15\7\0\3\15\5\0\1\15\6\0\1\u0181\34\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\u0182\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\u0183\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\3\15\1\u0184\31\15"+
    "\7\0\3\15\5\0\1\15\6\0\21\15\1\u0185\13\15"+
    "\7\0\3\15\5\0\1\15\6\0\13\15\1\u0186\21\15"+
    "\7\0\3\15\5\0\1\15\6\0\10\15\1\u0187\24\15"+
    "\7\0\3\15\5\0\1\15\6\0\2\15\1\u0188\32\15"+
    "\7\0\3\15\5\0\1\15\6\0\16\15\1\u0189\16\15"+
    "\7\0\3\15\5\0\1\15\6\0\22\15\1\u018a\12\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\u018b\34\15\7\0"+
    "\3\15\5\0\1\15\6\0\22\15\1\u018c\12\15\7\0"+
    "\3\15\5\0\1\15\6\0\7\15\1\u018d\25\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u018e\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u018f\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u0190\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\u0191\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\2\15\1\u0192\32\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u0193\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\u0194\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\u0195\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u0196\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\u0197\34\15\7\0\3\15"+
    "\5\0\1\15\6\0\13\15\1\u0198\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\20\15\1\u0199\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\20\15\1\u019a\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\17\15\1\u019b\15\15\7\0\3\15"+
    "\5\0\1\15\6\0\12\15\1\u019c\22\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\u019d\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\u019e\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\u019f\34\15\7\0\3\15\5\0"+
    "\1\15\6\0\13\15\1\u01a0\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\17\15\1\u01a1\15\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u01a2\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u01a3\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u01a4\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\7\15\1\u01a5\25\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u01a6\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u01a7\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u01a8\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\13\15\1\u01a9\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\u01aa\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\15\15\1\u01ab\17\15\7\0\3\15\5\0"+
    "\1\15\6\0\13\15\1\u01ac\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\u01ad\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\u01ae\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\7\15\1\u01af\25\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u01b0\15\15\1\u01b1\13\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u01b2\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u01b3\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\7\15\1\u01b4\25\15\7\0"+
    "\3\15\5\0\1\15\6\0\17\15\1\u01b5\15\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\u01b6\34\15\7\0\3\15"+
    "\5\0\1\15\6\0\11\15\1\u01b7\23\15\7\0\3\15"+
    "\5\0\1\15\6\0\11\15\1\u01b8\23\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\u01b9\34\15\7\0\3\15\5\0"+
    "\1\15\6\0\13\15\1\u01ba\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u01bb\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\u01bc\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\u01bd\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u01be\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u01bf\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\13\15\1\u01c0\21\15\7\0\3\15\5\0"+
    "\1\15\6\0\17\15\1\u01c1\15\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u01c2\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u01c3\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u01c4\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u01c5\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\u01c6\34\15\7\0\3\15\5\0\1\15"+
    "\6\0\11\15\1\u01c7\23\15\7\0\3\15\5\0\1\15"+
    "\6\0\5\15\1\u01c8\27\15\7\0\3\15\5\0\1\15"+
    "\6\0\3\15\1\u01c9\31\15\7\0\3\15\5\0\1\15"+
    "\6\0\16\15\1\u01ca\16\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\u01cb\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\12\15\1\u01cc\22\15\7\0\3\15\5\0\1\15"+
    "\6\0\22\15\1\u01cd\12\15\7\0\3\15\5\0\1\15"+
    "\6\0\3\15\1\u01ce\31\15\7\0\3\15\5\0\1\15"+
    "\6\0\25\15\1\u01cf\7\15\7\0\3\15\5\0\1\15"+
    "\6\0\12\15\1\u01d0\22\15\7\0\3\15\5\0\1\15"+
    "\6\0\11\15\1\u01d1\23\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\u01d2\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\17\15\1\u01d3\15\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\u01d4\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\15\1\u01d5\33\15\7\0\3\15\5\0\1\15"+
    "\6\0\11\15\1\u01d6\23\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\u01d7\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\u01d8\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\15\1\u01d9\33\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\u01da\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\u01db\34\15\7\0\3\15\5\0\1\15\6\0"+
    "\22\15\1\u01dc\12\15\7\0\3\15\5\0\1\15\6\0"+
    "\7\15\1\u01dd\25\15\7\0\3\15\5\0\1\15\6\0"+
    "\20\15\1\u01de\14\15\7\0\3\15\5\0\1\15\6\0"+
    "\1\u01df\34\15\7\0\3\15\5\0\1\15\6\0\10\15"+
    "\1\u01e0\24\15\7\0\3\15\5\0\1\15\6\0\1\u01e1"+
    "\34\15\7\0\3\15\5\0\1\15\6\0\6\15\1\u01e2"+
    "\26\15\7\0\3\15\5\0\1\15\6\0\13\15\1\u01e3"+
    "\21\15\7\0\3\15\5\0\1\15\6\0\2\15\1\u01e4"+
    "\32\15\7\0\3\15\5\0\1\15\6\0\1\u01e5\34\15"+
    "\7\0\3\15\5\0\1\15\6\0\7\15\1\u01e6\25\15"+
    "\7\0\3\15\5\0\1\15\6\0\22\15\1\u01e7\12\15"+
    "\7\0\3\15\5\0\1\15\6\0\1\u01e8\34\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u01e9\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\25\15\1\u01ea\7\15\7\0"+
    "\3\15\5\0\1\15\6\0\5\15\1\u01eb\27\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u01ec\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u01ed\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u01ee\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\u01ef\33\15\7\0"+
    "\3\15\5\0\1\15\6\0\7\15\1\u01f0\25\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\u01f1\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u01f2\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u01f3\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\2\15\1\u01f4\32\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u01f5\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\u01f6\33\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u01f7\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\22\15\1\u01f8\12\15\7\0"+
    "\3\15\5\0\1\15\6\0\6\15\1\u01f9\26\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u01fa\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\26\15\1\u01fb\6\15\7\0"+
    "\3\15\5\0\1\15\6\0\11\15\1\u01fc\23\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u01fd\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\10\15\1\u01fe\24\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u01ff\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\15\1\u0200\33\15\7\0"+
    "\3\15\5\0\1\15\6\0\21\15\1\u0201\13\15\7\0"+
    "\3\15\5\0\1\15\6\0\2\15\1\u0202\32\15\7\0"+
    "\3\15\5\0\1\15\6\0\3\15\1\u0203\31\15\7\0"+
    "\3\15\5\0\1\15\6\0\13\15\1\u0204\21\15\7\0"+
    "\3\15\5\0\1\15\6\0\20\15\1\u0205\14\15\7\0"+
    "\3\15\5\0\1\15\6\0\12\15\1\u0206\22\15\7\0"+
    "\3\15\5\0\1\15\6\0\1\u0207\34\15\7\0\3\15"+
    "\5\0\1\15\6\0\13\15\1\u0208\21\15\7\0\3\15"+
    "\5\0\1\15\6\0\12\15\1\u0209\22\15\7\0\3\15"+
    "\5\0\1\15\6\0\20\15\1\u020a\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\u020b\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\4\15\1\u020c\30\15\7\0\3\15"+
    "\5\0\1\15\6\0\12\15\1\u020d\22\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\u020e\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\20\15\1\u020f\14\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\u0210\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\5\15\1\u0211\27\15\7\0\3\15"+
    "\5\0\1\15\6\0\10\15\1\u0212\24\15\7\0\3\15"+
    "\5\0\1\15\6\0\2\15\1\u0213\32\15\7\0\3\15"+
    "\5\0\1\15\6\0\1\u0214\34\15\7\0\3\15\5\0"+
    "\1\15\6\0\24\15\1\u0215\10\15\7\0\3\15\5\0"+
    "\1\15\6\0\7\15\1\u0216\25\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u0217\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u0218\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u0219\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u021a\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u021b\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u021c\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\6\15\1\u021d\26\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u021e\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\6\15\1\u021f\26\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u0220\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\u0221\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u0222\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\u0223\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\3\15\1\u0224\31\15\7\0\3\15\5\0"+
    "\1\15\6\0\22\15\1\u0225\12\15\7\0\3\15\5\0"+
    "\1\15\6\0\5\15\1\u0226\27\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\u0227\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\32\15\1\u0228\2\15\7\0\3\15\5\0"+
    "\1\15\6\0\11\15\1\u0229\23\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\15\1\u022a\33\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u022b\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u022c\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\12\15\1\u022d\22\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u022e\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u022f\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u0230\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\10\15\1\u0231\24\15\7\0\3\15\5\0"+
    "\1\15\6\0\2\15\1\u0232\32\15\7\0\3\15\5\0"+
    "\1\15\6\0\20\15\1\u0233\14\15\7\0\3\15\5\0"+
    "\1\15\6\0\1\u0234\34\15\7\0\3\15\5\0\1\15"+
    "\6\0\7\15\1\u0235\25\15\7\0\3\15\5\0\1\15"+
    "\6\0\12\15\1\u0236\22\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\u0237\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\3\15\1\u0238\31\15\7\0\3\15\5\0\1\15"+
    "\6\0\12\15\1\u0239\22\15\7\0\3\15\5\0\1\15"+
    "\6\0\20\15\1\u023a\14\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\15\1\u023b\33\15\7\0\3\15\5\0\1\15"+
    "\6\0\6\15\1\u023c\26\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\u023d\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\10\15\1\u023e\24\15\7\0\3\15\5\0\1\15"+
    "\6\0\1\u023f\34\15\7\0\3\15\5\0\1\15\6\0"+
    "\12\15\1\u0240\22\15\7\0\3\15\5\0\1\15\6\0"+
    "\10\15\1\u0241\24\15\7\0\3\15\5\0\1\15\6\0"+
    "\3\15\1\u0242\31\15\7\0\3\15\5\0\1\15\6\0"+
    "\20\15\1\u0243\14\15\7\0\3\15\5\0\1\15\6\0"+
    "\10\15\1\u0244\24\15\7\0\3\15\5\0\1\15\6\0"+
    "\5\15\1\u0245\27\15\7\0\3\15\5\0\1\15\6\0"+
    "\2\15\1\u0246\32\15\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23307];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\2\11\1\1\1\11"+
    "\32\1\1\11\1\0\1\1\2\0\1\1\3\0\114\1"+
    "\1\0\u01ca\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[582];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private void imprimir(String descricao, String lexema) {
            System.out.println(lexema + " - " + descricao);
    }
	public Scanner(java.io.Reader r, ComplexSymbolFactory sf){
        this(r);
        this.sf=sf;
    }
	public Symbol symbol(String plaintext,int code){
	    return sf.newSymbol(plaintext,code,new Location("",yyline+1, yycolumn +1,yychar), new Location("",yyline+1,yycolumn+yylength(),yychar));
	}
	public Symbol symbol(String plaintext,int code,Integer number){
	    return sf.newSymbol(plaintext,code,new Location("",yyline+1, yycolumn +1,yychar), new Location("",yyline+1,yycolumn+yylength(),yychar),number);
	}
	private ComplexSymbolFactory sf;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return sf.newSymbol("EOF",sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character: "+yytext()+" at line "+(yyline+1)+", column "+(yycolumn+1) );
            } 
            // fall through
          case 136: break;
          case 2: 
            { imprimir("Simbolo Relacional", yytext());
            } 
            // fall through
          case 137: break;
          case 3: 
            { imprimir("Simbolo Aritimetico", yytext());
            } 
            // fall through
          case 138: break;
          case 4: 
            { 
            } 
            // fall through
          case 139: break;
          case 5: 
            { imprimir("Numero Inteiro", yytext());
            } 
            // fall through
          case 140: break;
          case 6: 
            { imprimir("Delimitador", yytext());
            } 
            // fall through
          case 141: break;
          case 7: 
            { imprimir("Identificador", yytext());
            } 
            // fall through
          case 142: break;
          case 8: 
            { imprimir("Sinal de Atrinuição", yytext());
            } 
            // fall through
          case 143: break;
          case 9: 
            { return symbol("Plus", sym.PLUS);
            } 
            // fall through
          case 144: break;
          case 10: 
            { imprimir("Comentario", yytext());
            } 
            // fall through
          case 145: break;
          case 11: 
            { imprimir("Ponteiro", yytext());
            } 
            // fall through
          case 146: break;
          case 12: 
            { imprimir("Palavra reservada do", yytext());
            } 
            // fall through
          case 147: break;
          case 13: 
            { imprimir("Palavra reservada or", yytext());
            } 
            // fall through
          case 148: break;
          case 14: 
            { imprimir("Palavra reservada of", yytext());
            } 
            // fall through
          case 149: break;
          case 15: 
            { imprimir("Palavra reservada to", yytext());
            } 
            // fall through
          case 150: break;
          case 16: 
            { imprimir("Palavra reservada in", yytext());
            } 
            // fall through
          case 151: break;
          case 17: 
            { imprimir("Palavra reservada if", yytext());
            } 
            // fall through
          case 152: break;
          case 18: 
            { imprimir("Numero Real", yytext());
            } 
            // fall through
          case 153: break;
          case 19: 
            { return symbol("Point", sym.POINT);
            } 
            // fall through
          case 154: break;
          case 20: 
            { return symbol("Semicolumn", sym.SEMICOLUN);
            } 
            // fall through
          case 155: break;
          case 21: 
            { return symbol("Plus", sym.COMMA);
            } 
            // fall through
          case 156: break;
          case 22: 
            { imprimir("Palavra reservada and", yytext());
            } 
            // fall through
          case 157: break;
          case 23: 
            { imprimir("Palavra reservada asm", yytext());
            } 
            // fall through
          case 158: break;
          case 24: 
            { imprimir("Palavra reservada not", yytext());
            } 
            // fall through
          case 159: break;
          case 25: 
            { imprimir("Palavra reservada nil", yytext());
            } 
            // fall through
          case 160: break;
          case 26: 
            { imprimir("Palavra reservada div", yytext());
            } 
            // fall through
          case 161: break;
          case 27: 
            { imprimir("Palavra reservada set", yytext());
            } 
            // fall through
          case 162: break;
          case 28: 
            { imprimir("Palavra reservada shr", yytext());
            } 
            // fall through
          case 163: break;
          case 29: 
            { imprimir("Palavra reservada shl", yytext());
            } 
            // fall through
          case 164: break;
          case 30: 
            { imprimir("Palavra reservada mod", yytext());
            } 
            // fall through
          case 165: break;
          case 31: 
            { return symbol("End"sym.END);
            } 
            // fall through
          case 166: break;
          case 32: 
            { imprimir("Palavra reservada var", yytext());
            } 
            // fall through
          case 167: break;
          case 33: 
            { imprimir("Modificadores far", yytext());
            } 
            // fall through
          case 168: break;
          case 34: 
            { imprimir("Palavra reservada for", yytext());
            } 
            // fall through
          case 169: break;
          case 35: 
            { imprimir("Palavra reservada xor", yytext());
            } 
            // fall through
          case 170: break;
          case 36: 
            { imprimir("String", yytext());
            } 
            // fall through
          case 171: break;
          case 37: 
            { imprimir("Modificadores name", yytext());
            } 
            // fall through
          case 172: break;
          case 38: 
            { imprimir("Modificadores near", yytext());
            } 
            // fall through
          case 173: break;
          case 39: 
            { imprimir("Modificadores read", yytext());
            } 
            // fall through
          case 174: break;
          case 40: 
            { imprimir("Tipos_Reais real", yytext());
            } 
            // fall through
          case 175: break;
          case 41: 
            { imprimir("Palavra reservada case", yytext());
            } 
            // fall through
          case 176: break;
          case 42: 
            { imprimir("Tipos_Reais comp", yytext());
            } 
            // fall through
          case 177: break;
          case 43: 
            { imprimir("Modificadores cvar", yytext());
            } 
            // fall through
          case 178: break;
          case 44: 
            { imprimir("Tipos_Ordinarios char", yytext());
            } 
            // fall through
          case 179: break;
          case 45: 
            { imprimir("Palavra reservada eles", yytext());
            } 
            // fall through
          case 180: break;
          case 46: 
            { imprimir("Palavra reservada type", yytext());
            } 
            // fall through
          case 181: break;
          case 47: 
            { imprimir("Palavra reservada then", yytext());
            } 
            // fall through
          case 182: break;
          case 48: 
            { imprimir("Tipos_Ordinarios word", yytext());
            } 
            // fall through
          case 183: break;
          case 49: 
            { imprimir("Palavra reservada with", yytext());
            } 
            // fall through
          case 184: break;
          case 50: 
            { imprimir("Tipos_Ordinarios byte", yytext());
            } 
            // fall through
          case 185: break;
          case 51: 
            { imprimir("Palavra reservada goto", yytext());
            } 
            // fall through
          case 186: break;
          case 52: 
            { imprimir("Palavra reservada file", yytext());
            } 
            // fall through
          case 187: break;
          case 53: 
            { imprimir("Palavra reservada unit", yytext());
            } 
            // fall through
          case 188: break;
          case 54: 
            { imprimir("Palavra reservada uses", yytext());
            } 
            // fall through
          case 189: break;
          case 55: 
            { imprimir("Palavra reservada array", yytext());
            } 
            // fall through
          case 190: break;
          case 56: 
            { imprimir("Modificadores alias", yytext());
            } 
            // fall through
          case 191: break;
          case 57: 
            { imprimir("Modificadores cdecl", yytext());
            } 
            // fall through
          case 192: break;
          case 58: 
            { imprimir("Palavra reservada const", yytext());
            } 
            // fall through
          case 193: break;
          case 59: 
            { imprimir("Modificadores index", yytext());
            } 
            // fall through
          case 194: break;
          case 60: 
            { imprimir("Tipos_Ordinarios int64", yytext());
            } 
            // fall through
          case 195: break;
          case 61: 
            { imprimir("Modificadores write", yytext());
            } 
            // fall through
          case 196: break;
          case 62: 
            { imprimir("Palavra reservada while", yytext());
            } 
            // fall through
          case 197: break;
          case 63: 
            { imprimir("Modificadores break", yytext());
            } 
            // fall through
          case 198: break;
          case 64: 
            { return symbol("Begin", sym.BEGIN);
            } 
            // fall through
          case 199: break;
          case 65: 
            { imprimir("Palavra reservada label", yytext());
            } 
            // fall through
          case 200: break;
          case 66: 
            { imprimir("Modificadores local", yytext());
            } 
            // fall through
          case 201: break;
          case 67: 
            { imprimir("Modificadores far16", yytext());
            } 
            // fall through
          case 202: break;
          case 68: 
            { imprimir("Palavra reservada until", yytext());
            } 
            // fall through
          case 203: break;
          case 69: 
            { imprimir("Tipos_Ordinarios qword", yytext());
            } 
            // fall through
          case 204: break;
          case 70: 
            { imprimir("Palavra reservada downto", yytext());
            } 
            // fall through
          case 205: break;
          case 71: 
            { imprimir("Tipos_Reais double", yytext());
            } 
            // fall through
          case 206: break;
          case 72: 
            { imprimir("Modificadores result", yytext());
            } 
            // fall through
          case 207: break;
          case 73: 
            { imprimir("Palavra reservada record", yytext());
            } 
            // fall through
          case 208: break;
          case 74: 
            { imprimir("Palavra reservada repeat", yytext());
            } 
            // fall through
          case 209: break;
          case 75: 
            { imprimir("Palavra reservada string", yytext());
            } 
            // fall through
          case 210: break;
          case 76: 
            { imprimir("Modificadores strict", yytext());
            } 
            // fall through
          case 211: break;
          case 77: 
            { imprimir("Modificadores stored", yytext());
            } 
            // fall through
          case 212: break;
          case 78: 
            { imprimir("Tipos_Reais single", yytext());
            } 
            // fall through
          case 213: break;
          case 79: 
            { imprimir("Modificadores export", yytext());
            } 
            // fall through
          case 214: break;
          case 80: 
            { imprimir("Palavra reservada object", yytext());
            } 
            // fall through
          case 215: break;
          case 81: 
            { imprimir("Palavra reservada inline", yytext());
            } 
            // fall through
          case 216: break;
          case 82: 
            { imprimir("Palavra reservada foward", yytext());
            } 
            // fall through
          case 217: break;
          case 83: 
            { imprimir("Modificadores pascal", yytext());
            } 
            // fall through
          case 218: break;
          case 84: 
            { imprimir("Palavra reservada packed", yytext());
            } 
            // fall through
          case 219: break;
          case 85: 
            { imprimir("Modificadores helper", yytext());
            } 
            // fall through
          case 220: break;
          case 86: 
            { imprimir("Modificadores default", yytext());
            } 
            // fall through
          case 221: break;
          case 87: 
            { imprimir("Modificadores stdcall", yytext());
            } 
            // fall through
          case 222: break;
          case 88: 
            { imprimir("Modificadores message", yytext());
            } 
            // fall through
          case 223: break;
          case 89: 
            { imprimir("Modificadores cppdecl", yytext());
            } 
            // fall through
          case 224: break;
          case 90: 
            { imprimir("Tipos_Ordinarios integer", yytext());
            } 
            // fall through
          case 225: break;
          case 91: 
            { imprimir("Modificadores iocheck", yytext());
            } 
            // fall through
          case 226: break;
          case 92: 
            { imprimir("Modificadores varargs", yytext());
            } 
            // fall through
          case 227: break;
          case 93: 
            { imprimir("Modificadores virtual", yytext());
            } 
            // fall through
          case 228: break;
          case 94: 
            { imprimir("Tipos_Ordinarios boolean", yytext());
            } 
            // fall through
          case 229: break;
          case 95: 
            { imprimir("Modificadores generic", yytext());
            } 
            // fall through
          case 230: break;
          case 96: 
            { imprimir("Tipos_Ordinarios longint", yytext());
            } 
            // fall through
          case 231: break;
          case 97: 
            { imprimir("Modificadores forward", yytext());
            } 
            // fall through
          case 232: break;
          case 98: 
            { return  symbol("Program", sym.PROGRAM);
            } 
            // fall through
          case 233: break;
          case 99: 
            { imprimir("Modificadores absolute", yytext());
            } 
            // fall through
          case 234: break;
          case 100: 
            { imprimir("Modificadores noreturn", yytext());
            } 
            // fall through
          case 235: break;
          case 101: 
            { imprimir("Modificadores register", yytext());
            } 
            // fall through
          case 236: break;
          case 102: 
            { imprimir("Modificadores safecall", yytext());
            } 
            // fall through
          case 237: break;
          case 103: 
            { imprimir("Tipos_Ordinarios smallint", yytext());
            } 
            // fall through
          case 238: break;
          case 104: 
            { imprimir("Tipos_Ordinarios shortint", yytext());
            } 
            // fall through
          case 239: break;
          case 105: 
            { imprimir("Tipos_Ordinarios cardinal", yytext());
            } 
            // fall through
          case 240: break;
          case 106: 
            { imprimir("Modificadores continue", yytext());
            } 
            // fall through
          case 241: break;
          case 107: 
            { imprimir("Tipos_Reais currency", yytext());
            } 
            // fall through
          case 242: break;
          case 108: 
            { imprimir("Tipos_Reais extended", yytext());
            } 
            // fall through
          case 243: break;
          case 109: 
            { imprimir("Modificadores external", yytext());
            } 
            // fall through
          case 244: break;
          case 110: 
            { imprimir("Modificadores override", yytext());
            } 
            // fall through
          case 245: break;
          case 111: 
            { imprimir("Modificadores overload", yytext());
            } 
            // fall through
          case 246: break;
          case 112: 
            { imprimir("Tipos_Ordinarios wordbool", yytext());
            } 
            // fall through
          case 247: break;
          case 113: 
            { imprimir("Tipos_Ordinarios bytebool", yytext());
            } 
            // fall through
          case 248: break;
          case 114: 
            { imprimir("Tipos_Ordinarios longword", yytext());
            } 
            // fall through
          case 249: break;
          case 115: 
            { imprimir("Tipos_Ordinarios longbool", yytext());
            } 
            // fall through
          case 250: break;
          case 116: 
            { imprimir("Palavra reservada function", yytext());
            } 
            // fall through
          case 251: break;
          case 117: 
            { imprimir("Modificadores platform", yytext());
            } 
            // fall through
          case 252: break;
          case 118: 
            { imprimir("Modificadores assembler", yytext());
            } 
            // fall through
          case 253: break;
          case 119: 
            { imprimir("Modificadores nodefault", yytext());
            } 
            // fall through
          case 254: break;
          case 120: 
            { imprimir("Modificadores softfloat", yytext());
            } 
            // fall through
          case 255: break;
          case 121: 
            { imprimir("Modificadores otherwise", yytext());
            } 
            // fall through
          case 256: break;
          case 122: 
            { imprimir("Modificadores interrupt", yytext());
            } 
            // fall through
          case 257: break;
          case 123: 
            { imprimir("Palavra reservada interface", yytext());
            } 
            // fall through
          case 258: break;
          case 124: 
            { imprimir("Modificadores unaligned", yytext());
            } 
            // fall through
          case 259: break;
          case 125: 
            { imprimir("Palavra reservada procedure", yytext());
            } 
            // fall through
          case 260: break;
          case 126: 
            { imprimir("Modificadores published", yytext());
            } 
            // fall through
          case 261: break;
          case 127: 
            { imprimir("Tipos_Ordinarios qwordbool", yytext());
            } 
            // fall through
          case 262: break;
          case 128: 
            { imprimir("Modificadores specialize", yytext());
            } 
            // fall through
          case 263: break;
          case 129: 
            { imprimir("Modificadores enumerator", yytext());
            } 
            // fall through
          case 264: break;
          case 130: 
            { imprimir("Modificadores oldfpccall", yytext());
            } 
            // fall through
          case 265: break;
          case 131: 
            { imprimir("Modificadores reintroduce", yytext());
            } 
            // fall through
          case 266: break;
          case 132: 
            { imprimir("Modificadores nostackframe", yytext());
            } 
            // fall through
          case 267: break;
          case 133: 
            { imprimir("Modificadores experimental", yytext());
            } 
            // fall through
          case 268: break;
          case 134: 
            { imprimir("Modificadores saveregisters", yytext());
            } 
            // fall through
          case 269: break;
          case 135: 
            { imprimir("Modificadores unimplemented", yytext());
            } 
            // fall through
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
