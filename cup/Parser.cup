package Compiler;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory;
import java.util.*;
import java.io.*;

parser code {:


    public void report_error(String message, Object info) {

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }


        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public static void main(String args[]) throws Exception {
        ComplexSymbolFactory sf = new ComplexSymbolFactory();
        if (args.length==0)new Parser(new Scanner(new FileReader(args[0]),sf),sf).parse();
        else new Parser(new Scanner(new FileReader(args[0]),sf),sf).parse();
    }
:};


terminal  ARRAY, BEGIN, CASE, CONST;
terminal  String AND, NOT, OR, MINUS, STAR, PLUS;
terminal  String DIV, MOD, SLASH;
terminal  DO, DOWNTO, ELSE, END, FILE, FOR, FORWARD, FUNCTION, GOTO, IF;
terminal  IMPLEMENTATION, IN, INTERFACE, LABEL, NIL;
terminal  OF, PACKED, PROCEDURE, PROGRAM, RECORD, REPEAT, SET, EXTERNAL;
terminal  STRING, THEN, TO, TYPE, UNIT, UNTIL, USES, VAR, WHILE, WITH, XOR;
terminal  String IDENTIFIER, CHARACTER_STRING;
terminal  ASSIGNMENT;
terminal  COLON, COMMA, DIGSEQ;
terminal  DOTDOT, EQUAL;
terminal  GE, GT, LBRAC, LE, LPAREN, LT;
terminal  NOTEQUAL, PBEGIN, PFILE, RBRAC;
terminal  REALNUMBER, RPAREN, STARSTAR, UPARROW;
terminal  INTEGER, BOOLEAN, REAL, CHAR, TRUE, FALSE;
terminal  SEMICOLON, DOT;


/* Non terminals used in the grammar section. */

non terminal program, program_heading;
non terminal List<String> identifier_list, for_designator, while_designator;
non terminal block, module;
non terminal label_declaration_part, label_list, label, constant_definition_part;
non terminal constant_list, constant_definition;
non terminal cexpression, csimple_expression;
non terminal cterm, cfactor, cexponentiation, cprimary, constant, non_string;
non terminal type_definition_part, type_definition_list, type_definition;
non terminal type_denoter, result_type;
non terminal new_type, new_ordinal_type, enumerated_type, subrange_type, new_structured_type;
non terminal structured_type, array_type, index_list, index_type, ordinal_type, component_type;
non terminal record_type, record_section_list, record_section, variant_part, variant_selector;
non terminal variant_list, variant, case_constant_list, case_constant, tag_field, tag_type;
non terminal set_type, base_type, file_type, new_pointer_type, domain_type, variable_declaration_part;
non terminal variable_declaration_list, variable_declaration, procedure_and_function_declaration_part;
non terminal proc_or_func_declaration_list, proc_or_func_declaration, procedure_declaration;
non terminal procedure_heading, directive;
non terminal formal_parameter_list, formal_parameter_section_list;
non terminal formal_parameter_section, value_parameter_specification, variable_parameter_specification;
non terminal procedural_parameter_specification, functional_parameter_specification;
non terminal String procedure_identification, function_identification, direction;
non terminal procedure_block, function_declaration, function_heading;
non terminal function_block, statement_part, compound_statement, statement_sequence, statement, open_statement;
non terminal closed_statement, non_labeled_closed_statement, non_labeled_open_statement, repeat_statement;
non terminal open_while_statement, closed_while_statement, open_for_statement, closed_for_statement;
non terminal open_with_statement, closed_with_statement, open_if_statement, closed_if_statement;
non terminal assignment_statement;
non terminal variable_access;
non terminal indexed_variable, index_expression_list, index_expression;
non terminal field_designator, procedure_statement;
non terminal params, actual_parameter_list;
non terminal actual_parameter;
non terminal goto_statement, case_statement, case_index, case_list_element_list, case_list_element;
non terminal control_variable, initial_value, final_value, record_variable_list;
non terminal boolean_expression, expression, simple_expression, term, factor, exponentiation, primary;
non terminal unsigned_constant, unsigned_number, unsigned_integer, unsigned_real, function_designator;
non terminal set_constructor, member_designator_list, member_designator, relop;
non terminal identifier, addop, mulop, sign;
non terminal semicolon, comma;


precedence left STAR, DIV;


program ::= program_heading semicolon block DOT;

program_heading ::= PROGRAM identifier | PROGRAM identifier LPAREN identifier_list RPAREN;

identifier_list ::= identifier_list comma IDENTIFIER | IDENTIFIER;


block ::= label_declaration_part constant_definition_part type_definition_part
         variable_declaration_part procedure_and_function_declaration_part
         statement_part;

module ::= constant_definition_part type_definition_part variable_declaration_part
   			  procedure_and_function_declaration_part;

label_declaration_part ::= LABEL label_list semicolon | semicolon | ;


label_list ::= label_list comma label | label;

label ::= DIGSEQ;

constant_definition_part ::= CONST constant_list | ;

constant_list ::= constant_list constant_definition | constant_definition;

constant_definition ::= identifier EQUAL cexpression semicolon | semicolon;

cexpression ::= csimple_expression | csimple_expression relop csimple_expression;

csimple_expression ::= cterm | csimple_expression addop cterm;

cterm ::= cfactor | cterm mulop cfactor;

cfactor ::= sign cfactor| cexponentiation;

cexponentiation ::= cprimary | cprimary STARSTAR cexponentiation;

cprimary ::= identifier | LPAREN cexpression:ce RPAREN | unsigned_constant | NOT cprimary;

constant ::= non_string | sign non_string | CHARACTER_STRING;

sign ::= PLUS | MINUS;

non_string ::= DIGSEQ | identifier| REALNUMBER;

type_definition_part ::= TYPE type_definition_list | ;


type_definition_list ::= type_definition_list type_definition | type_definition;

type_definition ::= identifier:id EQUAL type_denoter:td semicolon | semicolon;

type_denoter ::= IDENTIFIER
                | new_type
                | STRING
                | INTEGER
                | CHAR
                | REAL
                | BOOLEAN  ;

new_type ::= new_ordinal_type | new_structured_type | new_pointer_type;

new_ordinal_type ::= enumerated_type | subrange_type;

enumerated_type ::= LPAREN identifier_list RPAREN;

subrange_type ::= constant DOTDOT constant;

new_structured_type ::= structured_type | PACKED structured_type;

structured_type ::= array_type | record_type | set_type | file_type;

array_type ::= ARRAY LBRAC index_list RBRAC OF component_type;

index_list ::= index_list comma index_type | index_type;

index_type ::= ordinal_type ;

ordinal_type ::= new_ordinal_type | identifier;

component_type ::= type_denoter;

variable_declaration_part ::= VAR variable_declaration_list | ;

variable_declaration_list ::= variable_declaration_list variable_declaration
                          | variable_declaration;

variable_declaration ::= identifier_list COLON type_denoter semicolon | semicolon;

procedure_and_function_declaration_part ::= proc_or_func_declaration_list semicolon | ;

proc_or_func_declaration_list ::= proc_or_func_declaration_list semicolon proc_or_func_declaration
                              | proc_or_func_declaration;

proc_or_func_declaration ::= procedure_declaration | function_declaration;

procedure_declaration ::= procedure_heading semicolon directive |
                          procedure_heading semicolon procedure_block;

procedure_heading ::= procedure_identification |
   					  procedure_identification formal_parameter_list;

directive ::= FORWARD | EXTERNAL;


formal_parameter_list ::= LPAREN formal_parameter_section_list RPAREN;

formal_parameter_section_list ::= formal_parameter_section_list semicolon formal_parameter_section
                                  |formal_parameter_section;

formal_parameter_section ::= value_parameter_specification
   							  | variable_parameter_specification
                              | procedural_parameter_specification
                              | functional_parameter_specification;

value_parameter_specification ::= identifier_list COLON type_denoter;

variable_parameter_specification ::= VAR identifier_list COLON type_denoter;

procedural_parameter_specification ::= procedure_heading;

functional_parameter_specification ::= function_heading;

procedure_identification ::= PROCEDURE identifier;

procedure_block ::= block;

function_declaration ::= function_heading semicolon directive |
                      function_identification semicolon function_block |
                      function_heading semicolon function_block;

function_heading ::= FUNCTION identifier COLON result_type
                      | function_identification
                      formal_parameter_list COLON result_type;


result_type ::= type_denoter;

function_identification ::= FUNCTION identifier;

function_block ::= block;

statement_part ::= compound_statement ;

compound_statement ::= BEGIN statement_sequence END ;

statement_sequence ::= statement_sequence semicolon statement | statement;

statement ::= open_statement | closed_statement;

open_statement ::= label COLON non_labeled_open_statement | non_labeled_open_statement;

closed_statement ::= label COLON non_labeled_closed_statement | non_labeled_closed_statement;

non_labeled_closed_statement ::= assignment_statement | procedure_statement
                               | goto_statement
                               | compound_statement
                               | case_statement
                               | repeat_statement
                               | closed_with_statement
                               | closed_if_statement
                               | closed_while_statement
                               | closed_for_statement
                               | ;

non_labeled_open_statement ::= open_with_statement | open_if_statement | open_while_statement |
                           open_for_statement;

repeat_statement ::= REPEAT statement_sequence UNTIL boolean_expression;

while_designator ::= WHILE boolean_expression;

open_while_statement ::= while_designator DO open_statement;

closed_while_statement ::= while_designator DO closed_statement;

for_designator ::= FOR control_variable ASSIGNMENT initial_value direction final_value;

open_for_statement ::= for_designator:fd DO open_statement;

closed_for_statement ::= for_designator:fd DO closed_statement;


open_with_statement ::= WITH record_variable_list DO open_statement;

closed_with_statement ::= WITH record_variable_list DO closed_statement;

open_if_statement ::= IF boolean_expression THEN statement
                | IF boolean_expression THEN closed_statement ELSE open_statement;

closed_if_statement ::= IF boolean_expression THEN closed_statement ELSE closed_statement;

assignment_statement ::= variable_access ASSIGNMENT expression;

variable_access ::= identifier
                | indexed_variable
                | field_designator
                | variable_access UPARROW;


indexed_variable ::= variable_access LBRAC index_expression_list RBRAC;

index_expression_list ::= index_expression_list comma index_expression | index_expression;

index_expression ::= expression;

field_designator ::= variable_access DOT identifier;

procedure_statement ::= identifier params | identifier;

params ::= LPAREN actual_parameter_list RPAREN;

actual_parameter_list ::= actual_parameter_list comma actual_parameter | actual_parameter;

actual_parameter ::= expression | expression COLON expression |
                     expression COLON expression COLON expression;

goto_statement ::= GOTO label;

case_statement ::= CASE case_index OF case_list_element_list END
              | CASE case_index OF case_list_element_list SEMICOLON END;

case_index ::= expression;

case_list_element_list ::= case_list_element_list semicolon case_list_element | case_list_element;

case_list_element ::= case_constant_list COLON statement;

control_variable ::= identifier;

initial_value ::= expression:exp {: RESULT = exp; :};

direction ::= TO {: RESULT = "to"; :} | DOWNTO {: RESULT = "downTo"; :};

final_value ::= expression:exp {: RESULT = exp; :};

record_variable_list ::= record_variable_list comma variable_access | variable_access;

boolean_expression ::= expression;

expression ::= simple_expression |
              simple_expression relop simple_expression;

simple_expression ::= term | simple_expression addop term;

term ::= factor | term mulop factor;

factor ::= sign factor | exponentiation;

exponentiation ::= primary | primary STARSTAR exponentiation;

primary ::= variable_access
   			 | unsigned_constant
   			 | function_designator
   			 | set_constructor
             | LPAREN expression:exp RPAREN
             | NOT primary:pr
             | TRUE
             | FALSE;

unsigned_constant ::= unsigned_number | CHARACTER_STRING | NIL;

unsigned_number ::= unsigned_integer | unsigned_real;

unsigned_integer ::= DIGSEQ;

unsigned_real ::= REALNUMBER;

function_designator ::= identifier params;

set_constructor ::= LBRAC member_designator_list RBRAC | LBRAC RBRAC;

member_designator_list ::= member_designator_list comma member_designator | member_designator;

member_designator ::= member_designator DOTDOT expression | expression;

addop ::= PLUS | MINUS | OR;

mulop ::= STAR
        | SLASH
        | DIV
        | MOD
        | AND;

relop ::= EQUAL | NOTEQUAL | LT | GT | LE | GE | IN;

identifier ::= IDENTIFIER;

semicolon ::= SEMICOLON;

comma ::= COMMA;

