/* The following code was generated by JFlex 1.6.1 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/rannany/compilador/src/pascal_lang.flex</tt>
 */
class PascalAnalizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\14\1\15\1\15\1\14\22\0\1\23\6\0\1\13"+
    "\2\22\1\11\1\4\1\22\1\4\1\10\1\21\1\6\1\55\2\7"+
    "\1\60\1\7\1\56\3\7\1\1\1\12\1\3\1\2\1\3\2\0"+
    "\32\16\1\22\1\0\1\22\1\24\1\16\1\0\1\25\1\50\1\34"+
    "\1\27\1\35\1\46\1\44\1\53\1\41\1\51\1\52\1\45\1\33"+
    "\1\26\1\36\1\47\1\61\1\30\1\32\1\37\1\40\1\42\1\43"+
    "\1\54\1\31\1\57\1\17\1\5\1\20\7\0\1\15\u1fa2\0\1\15"+
    "\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\2\5\1\6\1\3"+
    "\1\7\1\1\1\4\1\10\1\1\1\3\1\1\26\10"+
    "\1\11\1\0\1\10\2\0\1\12\1\0\2\13\1\14"+
    "\13\10\1\15\27\10\1\16\3\10\1\17\2\10\1\20"+
    "\3\10\1\21\2\10\1\22\31\10\1\23\1\24\2\10"+
    "\1\25\7\10\1\26\1\27\6\10\1\30\11\10\1\31"+
    "\7\10\1\32\1\10\1\33\1\10\1\34\11\10\1\35"+
    "\24\10\1\36\12\10\1\37\1\40\16\10\1\41\6\10"+
    "\1\42\1\43\11\10\1\44\1\45\22\10\1\46\3\10"+
    "\1\47\1\10\1\50\1\10\1\51\1\10\1\52\1\53"+
    "\7\10\1\54\1\55\3\10\1\56\1\57\11\10\1\60"+
    "\1\61\2\10\1\62\7\10\1\63\11\10\1\64\4\10"+
    "\1\65\1\10\1\66\36\10\1\67\1\70\16\10\1\71"+
    "\1\10\1\72\2\10\1\73\5\10\1\74\1\10\1\75"+
    "\1\10\1\76\3\10\1\77\1\100\13\10\1\101\4\10"+
    "\1\102\12\10\1\103\1\104\1\105\1\106\2\10\1\107"+
    "\4\10\1\110\1\10\1\111\1\112\1\113\1\114\14\10"+
    "\1\115\4\10\1\116\5\10\1\117\12\10\1\120\1\10"+
    "\1\121\1\122\5\10\1\123\4\10\1\124\7\10\1\125"+
    "\1\10\1\126\7\10\1\127\2\10\1\130\4\10\1\131"+
    "\14\10\1\132\1\10\1\133\1\134\1\135\1\10\1\136"+
    "\1\137\2\10\1\140\3\10\1\141\1\142\3\10\1\143"+
    "\3\10\1\144\1\145\1\10\1\146\4\10\1\147\1\10"+
    "\1\150\1\151\2\10\1\152\1\153\1\10\1\154\1\155"+
    "\1\10\1\156\1\157\2\10\1\160\1\161\6\10\1\162"+
    "\1\163\1\164\1\165\3\10\1\166\1\167\2\10\1\170"+
    "\1\171\5\10\1\172\4\10\1\173\1\10\1\174\1\10"+
    "\1\175\1\176\1\10\1\177\1\200\1\201\1\202\1\203"+
    "\1\10\1\204\1\205\2\10\1\206\1\10\1\207\1\10"+
    "\1\210\2\10\1\211\1\10\1\212\1\10\1\213\3\10"+
    "\1\214\1\10\1\215\2\10\1\216\1\217\1\10\1\220";

  private static int [] zzUnpackAction() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\62\0\226\0\310\0\372\0\u012c"+
    "\0\62\0\62\0\62\0\u015e\0\62\0\u0190\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384"+
    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514"+
    "\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\62"+
    "\0\372\0\u06a4\0\u06d6\0\u015e\0\u015e\0\u01c2\0\u01c2\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0190\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0190\0\u0ed8\0\u0f0a\0\u0190\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u0190\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u06d6\0\u0190\0\u154a\0\u157c"+
    "\0\u0190\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u0190\0\u0190\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u0190\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u0190\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u0190\0\u1b58\0\u0190\0\u1b8a\0\u0190\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u0190\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a"+
    "\0\u0190\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u0190"+
    "\0\u0190\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u0190\0\u0190\0\u299a\0\u29cc\0\u29fe\0\u2a30"+
    "\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0"+
    "\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u0190\0\u2d1e"+
    "\0\u2d50\0\u2d82\0\u0190\0\u2db4\0\u0190\0\u2de6\0\u0190\0\u2e18"+
    "\0\u0190\0\u0190\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44"+
    "\0\u2f76\0\u0190\0\u0190\0\u2fa8\0\u2fda\0\u300c\0\u0190\0\u0190"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c"+
    "\0\u31ce\0\u3200\0\u0190\0\u3232\0\u3264\0\u0190\0\u3296\0\u32c8"+
    "\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u0190\0\u33f4\0\u3426"+
    "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u0190\0\u36b0\0\u0190\0\u36e2"+
    "\0\u3714\0\u3746\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872"+
    "\0\u38a4\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02"+
    "\0\u3a34\0\u3a66\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92"+
    "\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a\0\u3c8c\0\u0190\0\u3cbe\0\u3cf0"+
    "\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80"+
    "\0\u3eb2\0\u3ee4\0\u3f16\0\u3f48\0\u3f7a\0\u0190\0\u3fac\0\u0190"+
    "\0\u3fde\0\u4010\0\u0190\0\u4042\0\u4074\0\u40a6\0\u40d8\0\u410a"+
    "\0\u0190\0\u413c\0\u0190\0\u416e\0\u0190\0\u41a0\0\u41d2\0\u4204"+
    "\0\u0190\0\u0190\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330"+
    "\0\u4362\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u0190\0\u445c\0\u448e"+
    "\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588\0\u45ba\0\u45ec\0\u461e"+
    "\0\u4650\0\u4682\0\u46b4\0\u46e6\0\u4718\0\u0190\0\u0190\0\u0190"+
    "\0\u0190\0\u474a\0\u477c\0\u0190\0\u47ae\0\u47e0\0\u4812\0\u4844"+
    "\0\u0190\0\u4876\0\u0190\0\u0190\0\u0190\0\u0190\0\u48a8\0\u48da"+
    "\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06\0\u4a38\0\u4a6a"+
    "\0\u4a9c\0\u4ace\0\u0190\0\u4b00\0\u4b32\0\u4b64\0\u4b96\0\u0190"+
    "\0\u4bc8\0\u4bfa\0\u4c2c\0\u4c5e\0\u4c90\0\u0190\0\u4cc2\0\u4cf4"+
    "\0\u4d26\0\u4d58\0\u4d8a\0\u4dbc\0\u4dee\0\u4e20\0\u4e52\0\u4e84"+
    "\0\u0190\0\u4eb6\0\u0190\0\u0190\0\u4ee8\0\u4f1a\0\u4f4c\0\u4f7e"+
    "\0\u4fb0\0\u0190\0\u4fe2\0\u5014\0\u5046\0\u5078\0\u0190\0\u50aa"+
    "\0\u50dc\0\u510e\0\u5140\0\u5172\0\u51a4\0\u51d6\0\u0190\0\u5208"+
    "\0\u0190\0\u523a\0\u526c\0\u529e\0\u52d0\0\u5302\0\u5334\0\u5366"+
    "\0\u0190\0\u5398\0\u53ca\0\u0190\0\u53fc\0\u542e\0\u5460\0\u5492"+
    "\0\u0190\0\u54c4\0\u54f6\0\u5528\0\u555a\0\u558c\0\u55be\0\u55f0"+
    "\0\u5622\0\u5654\0\u5686\0\u56b8\0\u56ea\0\u0190\0\u571c\0\u0190"+
    "\0\u0190\0\u0190\0\u574e\0\u0190\0\u0190\0\u5780\0\u57b2\0\u0190"+
    "\0\u57e4\0\u5816\0\u5848\0\u0190\0\u0190\0\u587a\0\u58ac\0\u58de"+
    "\0\u0190\0\u5910\0\u5942\0\u5974\0\u0190\0\u0190\0\u59a6\0\u0190"+
    "\0\u59d8\0\u5a0a\0\u5a3c\0\u5a6e\0\u0190\0\u5aa0\0\u0190\0\u0190"+
    "\0\u5ad2\0\u5b04\0\u0190\0\u0190\0\u5b36\0\u0190\0\u0190\0\u5b68"+
    "\0\u0190\0\u0190\0\u5b9a\0\u5bcc\0\u0190\0\u0190\0\u5bfe\0\u5c30"+
    "\0\u5c62\0\u5c94\0\u5cc6\0\u5cf8\0\u0190\0\u0190\0\u0190\0\u0190"+
    "\0\u5d2a\0\u5d5c\0\u5d8e\0\u0190\0\u0190\0\u5dc0\0\u5df2\0\u0190"+
    "\0\u0190\0\u5e24\0\u5e56\0\u5e88\0\u5eba\0\u5eec\0\u0190\0\u5f1e"+
    "\0\u5f50\0\u5f82\0\u5fb4\0\u0190\0\u5fe6\0\u0190\0\u6018\0\u0190"+
    "\0\u0190\0\u604a\0\u0190\0\u0190\0\u0190\0\u0190\0\u0190\0\u607c"+
    "\0\u0190\0\u0190\0\u60ae\0\u60e0\0\u0190\0\u6112\0\u0190\0\u6144"+
    "\0\u0190\0\u6176\0\u61a8\0\u0190\0\u61da\0\u0190\0\u620c\0\u0190"+
    "\0\u623e\0\u6270\0\u62a2\0\u0190\0\u62d4\0\u0190\0\u6306\0\u6338"+
    "\0\u0190\0\u0190\0\u636a\0\u0190";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\2"+
    "\1\20\1\11\1\15\1\21\1\22\1\23\1\24\1\25"+
    "\1\16\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\2\16\1\45\1\46\2\10\1\16\1\10\1\47\64\0"+
    "\1\50\65\0\1\7\1\51\45\0\2\51\1\0\1\51"+
    "\6\0\1\16\2\52\6\0\1\16\6\0\30\16\2\52"+
    "\1\16\1\52\1\16\6\0\2\51\1\53\44\0\2\51"+
    "\1\0\1\51\7\0\2\10\1\53\44\0\2\10\1\0"+
    "\1\10\1\0\13\54\1\55\2\0\44\54\5\0\3\16"+
    "\6\0\1\16\6\0\35\16\14\56\2\0\2\56\1\57"+
    "\41\56\21\0\1\60\45\0\1\61\10\0\1\61\6\0"+
    "\30\61\2\0\1\61\1\0\1\61\5\0\3\16\6\0"+
    "\1\16\6\0\1\16\1\62\1\16\1\63\1\16\1\64"+
    "\12\16\1\65\2\16\1\66\11\16\5\0\3\16\6\0"+
    "\1\16\6\0\1\67\7\16\1\70\1\71\2\16\1\72"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\4\16\1\73"+
    "\3\16\1\74\1\75\2\16\1\76\20\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\77\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\100\5\16\1\101\1\16\1\102"+
    "\1\103\1\104\1\16\1\105\5\16\1\106\3\16\1\107"+
    "\6\16\5\0\3\16\6\0\1\16\6\0\10\16\1\110"+
    "\1\111\23\16\5\0\3\16\6\0\1\16\6\0\1\112"+
    "\1\16\1\113\6\16\1\114\1\16\1\115\1\16\1\116"+
    "\4\16\1\117\3\16\1\120\6\16\5\0\3\16\6\0"+
    "\1\16\6\0\1\16\1\121\15\16\1\122\1\123\6\16"+
    "\1\124\5\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\125\6\16\1\126\2\16\1\127\2\16\1\130\1\131"+
    "\1\16\1\132\11\16\5\0\3\16\6\0\1\16\6\0"+
    "\4\16\1\133\4\16\1\134\14\16\1\135\6\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\16\1\136\3\16\1\137"+
    "\27\16\5\0\3\16\6\0\1\16\6\0\1\16\1\140"+
    "\4\16\1\141\2\16\1\142\7\16\1\143\13\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\144\13\16\1\145\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\146\5\16"+
    "\1\147\2\16\1\150\11\16\1\151\6\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\152\1\153\23\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\154\10\16\1\155\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\156\10\16\1\157"+
    "\1\16\1\160\1\161\20\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\162\2\16\1\163\7\16\1\164\4\16\1\165"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\3\16\1\166"+
    "\1\167\4\16\1\170\2\16\1\171\20\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\172\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\11\16\1\173\23\16\5\0\3\16"+
    "\6\0\1\16\6\0\16\16\1\174\16\16\5\0\1\16"+
    "\2\52\1\53\5\0\1\16\6\0\30\16\2\52\1\16"+
    "\1\52\1\16\6\0\2\175\45\0\2\175\1\0\1\175"+
    "\1\0\14\60\2\0\44\60\5\0\3\61\6\0\1\61"+
    "\6\0\35\61\5\0\3\16\6\0\1\16\6\0\2\16"+
    "\1\176\32\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\177\31\16\5\0\3\16\6\0\1\16\6\0\5\16"+
    "\1\200\1\201\26\16\5\0\3\16\6\0\1\16\6\0"+
    "\14\16\1\202\20\16\5\0\3\16\6\0\1\16\6\0"+
    "\5\16\1\203\27\16\5\0\3\16\6\0\1\16\6\0"+
    "\6\16\1\204\26\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\205\34\16\5\0\3\16\6\0\1\16\6\0\2\16"+
    "\1\206\1\207\1\16\1\210\4\16\1\211\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\212\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\16\1\213\33\16\5\0"+
    "\3\16\6\0\1\16\6\0\5\16\1\214\13\16\1\215"+
    "\1\216\12\16\5\0\3\16\6\0\1\16\6\0\13\16"+
    "\1\217\2\16\1\220\16\16\5\0\3\16\6\0\1\16"+
    "\6\0\15\16\1\221\17\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\222\4\16\1\223\1\16\1\224\4\16\1\225"+
    "\2\16\1\226\2\16\1\227\12\16\5\0\3\16\6\0"+
    "\1\16\6\0\15\16\1\230\3\16\1\231\13\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\232\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\12\16\1\233\22\16\5\0\3\16"+
    "\6\0\1\16\6\0\21\16\1\234\13\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\235\1\16\1\236\1\237\5\16"+
    "\1\240\23\16\5\0\3\16\6\0\1\16\6\0\1\16"+
    "\1\241\33\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\242\24\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\243\5\16\1\244\6\16\1\245\14\16\5\0\3\16"+
    "\6\0\1\16\6\0\5\16\1\246\27\16\5\0\3\16"+
    "\6\0\1\16\6\0\2\16\1\247\32\16\5\0\3\16"+
    "\6\0\1\16\6\0\3\16\1\250\1\16\1\251\27\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\252\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\253\4\16"+
    "\1\254\26\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\255\31\16\5\0\3\16\6\0\1\16\6\0\1\256"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\22\16\1\257"+
    "\12\16\5\0\3\16\6\0\1\16\6\0\1\260\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\2\16\1\261\10\16"+
    "\1\262\21\16\5\0\3\16\6\0\1\16\6\0\14\16"+
    "\1\263\20\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\264\24\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\265\7\16\1\266\12\16\5\0\3\16\6\0\1\16"+
    "\6\0\26\16\1\267\6\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\270\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\2\16\1\271\32\16\5\0\3\16\6\0\1\16"+
    "\6\0\24\16\1\272\10\16\5\0\3\16\6\0\1\16"+
    "\6\0\22\16\1\273\12\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\274\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\275\11\16\1\276\1\16\1\277\20\16\5\0"+
    "\3\16\6\0\1\16\6\0\10\16\1\300\24\16\5\0"+
    "\3\16\6\0\1\16\6\0\2\16\1\301\7\16\1\302"+
    "\5\16\1\303\14\16\5\0\3\16\6\0\1\16\6\0"+
    "\22\16\1\304\12\16\5\0\3\16\6\0\1\16\6\0"+
    "\7\16\1\305\25\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\306\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\307\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\14\16\1\310\20\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\311\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\312\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\14\16\1\313\20\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\16\1\314\33\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\315\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\23\16\1\316\11\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\16\1\317\5\16\1\320\25\16\5\0\3\16\6\0"+
    "\1\16\6\0\3\16\1\321\31\16\5\0\3\16\6\0"+
    "\1\16\6\0\3\16\1\322\12\16\1\323\16\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\16\1\324\33\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\325\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\5\16\1\326\1\16\1\327"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\11\16\1\330"+
    "\2\16\1\331\20\16\5\0\3\16\6\0\1\16\6\0"+
    "\23\16\1\332\11\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\333\34\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\334\24\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\335\22\16\5\0\3\16\6\0\1\16\6\0\11\16"+
    "\1\336\23\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\337\22\16\5\0\3\16\6\0\1\16\6\0\20\16"+
    "\1\340\14\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\341\31\16\5\0\3\16\6\0\1\16\6\0\11\16"+
    "\1\342\23\16\5\0\3\16\6\0\1\16\6\0\1\343"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\10\16\1\344"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\1\345\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\346\1\347"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\10\16\1\350"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\3\16\1\351"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\10\16\1\352"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\10\16\1\353"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\12\16\1\354"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\1\355\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\356\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\357\34\16\5\0"+
    "\3\16\6\0\1\16\6\0\3\16\1\360\31\16\5\0"+
    "\3\16\6\0\1\16\6\0\23\16\1\361\11\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\16\1\362\33\16\5\0"+
    "\3\16\6\0\1\16\6\0\2\16\1\363\15\16\1\364"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\13\16\1\365"+
    "\21\16\5\0\3\16\6\0\1\16\6\0\11\16\1\366"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\1\16\1\367"+
    "\33\16\5\0\3\16\6\0\1\16\6\0\14\16\1\370"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\10\16\1\371"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\10\16\1\372"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\10\16\1\373"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\20\16\1\374"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\12\16\1\375"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\12\16\1\376"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\7\16\1\377"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\14\16\1\u0100"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0101"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\17\16\1\u0102"+
    "\15\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u0103"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0104"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\5\16\1\u0105"+
    "\27\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u0106"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0107"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u0108"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\5\16\1\u0109"+
    "\4\16\1\u010a\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\22\16\1\u010b\12\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u010c\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u010d\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\2\16\1\u010e\32\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u010f\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\6\16\1\u0110\26\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\16\1\u0111\33\16\5\0\3\16\6\0\1\16\6\0"+
    "\5\16\1\u0112\27\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u0113\24\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u0114\1\u0115\23\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u0116\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\3\16\1\u0117\31\16\5\0\3\16\6\0\1\16"+
    "\6\0\21\16\1\u0118\13\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u0119\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u011a\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\16\1\u011b\33\16\5\0\3\16\6\0\1\16"+
    "\6\0\20\16\1\u011c\14\16\5\0\3\16\6\0\1\16"+
    "\6\0\14\16\1\u011d\20\16\5\0\3\16\6\0\1\16"+
    "\6\0\6\16\1\u011e\3\16\1\u011f\22\16\5\0\3\16"+
    "\6\0\1\16\6\0\5\16\1\u0120\27\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0121\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0122\20\16\1\u0123\3\16"+
    "\5\0\3\16\6\0\1\16\6\0\14\16\1\u0124\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u0125\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\26\16\1\u0126\6\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\u0127\34\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u0128\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u0129\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\2\16\1\u012a\32\16\5\0"+
    "\3\16\6\0\1\16\6\0\26\16\1\u012b\6\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\u012c\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\10\16\1\u012d\24\16\5\0"+
    "\3\16\6\0\1\16\6\0\11\16\1\u012e\23\16\5\0"+
    "\3\16\6\0\1\16\6\0\10\16\1\u012f\24\16\5\0"+
    "\3\16\6\0\1\16\6\0\17\16\1\u0130\15\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\u0131\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\30\16\1\u0132\4\16\5\0\3\16"+
    "\6\0\1\16\6\0\16\16\1\u0133\16\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\u0134\34\16\5\0\3\16\6\0"+
    "\1\16\6\0\7\16\1\u0135\25\16\5\0\3\16\6\0"+
    "\1\16\6\0\10\16\1\u0136\24\16\5\0\3\16\6\0"+
    "\1\16\6\0\7\16\1\u0137\25\16\5\0\3\16\6\0"+
    "\1\16\6\0\25\16\1\u0138\7\16\5\0\3\16\6\0"+
    "\1\16\6\0\7\16\1\u0139\2\16\1\u013a\4\16\1\u013b"+
    "\15\16\5\0\3\16\6\0\1\16\6\0\15\16\1\u013c"+
    "\17\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u013d"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u013e"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\1\u013f\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u0140\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u0141\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\22\16\1\u0142\12\16"+
    "\5\0\3\16\6\0\1\16\6\0\22\16\1\u0143\12\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u0144\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\4\16\1\u0145\30\16"+
    "\5\0\3\16\6\0\1\16\6\0\6\16\1\u0146\26\16"+
    "\5\0\3\16\6\0\1\16\6\0\5\16\1\u0147\27\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u0148\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u0149\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\21\16\1\u014a\13\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u014b\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\u014c\34\16\5\0"+
    "\3\16\6\0\1\16\6\0\6\16\1\u014d\26\16\5\0"+
    "\3\16\6\0\1\16\6\0\3\16\1\u014e\31\16\5\0"+
    "\3\16\6\0\1\16\6\0\13\16\1\u014f\21\16\5\0"+
    "\3\16\6\0\1\16\6\0\10\16\1\u0150\24\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\u0151\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u0152\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\u0153\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\3\16\1\u0154\31\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u0155\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\5\16\1\u0156\27\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\u0157\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\3\16\1\u0158\31\16\5\0\3\16"+
    "\6\0\1\16\6\0\7\16\1\u0159\25\16\5\0\3\16"+
    "\6\0\1\16\6\0\20\16\1\u015a\14\16\5\0\3\16"+
    "\6\0\1\16\6\0\21\16\1\u015b\13\16\5\0\3\16"+
    "\6\0\1\16\6\0\14\16\1\u015c\20\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\u015d\34\16\5\0\3\16\6\0"+
    "\1\16\6\0\1\16\1\u015e\5\16\1\u015f\25\16\5\0"+
    "\3\16\6\0\1\16\6\0\10\16\1\u0160\24\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\u0161\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\14\16\1\u0162\20\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u0163\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\u0164\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\14\16\1\u0165\20\16\5\0\3\16"+
    "\6\0\1\16\6\0\20\16\1\u0166\14\16\5\0\3\16"+
    "\6\0\1\16\6\0\12\16\1\u0167\22\16\5\0\3\16"+
    "\6\0\1\16\6\0\14\16\1\u0168\20\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0169\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u016a\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u016b\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\16\1\u016c\1\16\1\u016d\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u016e\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u016f\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u0170\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u0171\14\16"+
    "\1\u0172\14\16\5\0\3\16\6\0\1\16\6\0\22\16"+
    "\1\u0173\12\16\5\0\3\16\6\0\1\16\6\0\7\16"+
    "\1\u0174\25\16\5\0\3\16\6\0\1\16\6\0\14\16"+
    "\1\u0175\20\16\5\0\3\16\6\0\1\16\6\0\20\16"+
    "\1\u0176\14\16\5\0\3\16\6\0\1\16\6\0\22\16"+
    "\1\u0177\12\16\5\0\3\16\6\0\1\16\6\0\27\16"+
    "\1\u0178\5\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\u0179\13\16\1\u017a\15\16\5\0\3\16\6\0\1\16"+
    "\6\0\33\16\1\u017b\1\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\16\1\u017c\33\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u017d\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u017e\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\3\16\1\u017f\31\16\5\0\3\16\6\0\1\16"+
    "\6\0\13\16\1\u0180\21\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u0181\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\23\16\1\u0182\11\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u0183\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\3\16\1\u0184\31\16\5\0\3\16\6\0\1\16"+
    "\6\0\20\16\1\u0185\14\16\5\0\3\16\6\0\1\16"+
    "\6\0\14\16\1\u0186\1\16\1\u0187\4\16\1\u0188\11\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u0189\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\31\16\1\u018a\3\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\u018b\34\16\5\0"+
    "\3\16\6\0\1\16\6\0\3\16\1\u018c\31\16\5\0"+
    "\3\16\6\0\1\16\6\0\12\16\1\u018d\22\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\u018e\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u018f\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0190\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0191\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\3\16\1\u0192\31\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\u0193\34\16\5\0\3\16\6\0"+
    "\1\16\6\0\14\16\1\u0194\20\16\5\0\3\16\6\0"+
    "\1\16\6\0\21\16\1\u0195\13\16\5\0\3\16\6\0"+
    "\1\16\6\0\25\16\1\u0196\7\16\5\0\3\16\6\0"+
    "\1\16\6\0\23\16\1\u0197\11\16\5\0\3\16\6\0"+
    "\1\16\6\0\10\16\1\u0198\24\16\5\0\3\16\6\0"+
    "\1\16\6\0\1\u0199\34\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u019a\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\2\16\1\u019b\32\16\5\0\3\16\6\0\1\16"+
    "\6\0\23\16\1\u019c\11\16\5\0\3\16\6\0\1\16"+
    "\6\0\13\16\1\u019d\21\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\u019e\34\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\u019f\34\16\5\0\3\16\6\0\1\16\6\0\13\16"+
    "\1\u01a0\21\16\5\0\3\16\6\0\1\16\6\0\7\16"+
    "\1\u01a1\25\16\5\0\3\16\6\0\1\16\6\0\14\16"+
    "\1\u01a2\20\16\5\0\3\16\6\0\1\16\6\0\13\16"+
    "\1\u01a3\21\16\5\0\3\16\6\0\1\16\6\0\20\16"+
    "\1\u01a4\14\16\5\0\3\16\6\0\1\16\6\0\7\16"+
    "\1\u01a5\25\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u01a6\24\16\5\0\3\16\6\0\1\16\6\0\11\16"+
    "\1\u01a7\23\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\u01a8\22\16\5\0\3\16\6\0\1\16\6\0\2\16"+
    "\1\u01a9\32\16\5\0\3\16\6\0\1\16\6\0\3\16"+
    "\1\u01aa\31\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\u01ab\22\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\u01ac\22\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u01ad\24\16\5\0\3\16\6\0\1\16\6\0\1\u01ae"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\14\16\1\u01af"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u01b0"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01b1"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u01b2"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\17\16\1\u01b3"+
    "\15\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u01b4"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u01b5"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u01b6"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\1\u01b7\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\14\16\1\u01b8\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\17\16\1\u01b9\15\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01ba\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u01bb\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01bc\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01bd\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\7\16\1\u01be\25\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u01bf\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\2\16\1\u01c0\32\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01c1\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\14\16\1\u01c2\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u01c3\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\16\16\1\u01c4\16\16"+
    "\5\0\3\16\6\0\1\16\6\0\14\16\1\u01c5\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\u01c6\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\7\16\1\u01c7\25\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u01c8\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\17\16\1\u01c9\15\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u01ca\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u01cb\15\16"+
    "\1\u01cc\13\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u01cd\24\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u01ce\24\16\5\0\3\16\6\0\1\16\6\0\6\16"+
    "\1\u01cf\26\16\5\0\3\16\6\0\1\16\6\0\7\16"+
    "\1\u01d0\25\16\5\0\3\16\6\0\1\16\6\0\17\16"+
    "\1\u01d1\15\16\5\0\3\16\6\0\1\16\6\0\1\u01d2"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u01d3"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\14\16\1\u01d4"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\1\16\1\u01d5"+
    "\33\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u01d6"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u01d7"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u01d8"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u01d9"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\14\16\1\u01da"+
    "\20\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u01db"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u01dc"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u01dd"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01de"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\1\u01df\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u01e0\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\5\16\1\u01e1\1\16"+
    "\1\u01e2\25\16\5\0\3\16\6\0\1\16\6\0\11\16"+
    "\1\u01e3\23\16\5\0\3\16\6\0\1\16\6\0\11\16"+
    "\1\u01e4\23\16\5\0\3\16\6\0\1\16\6\0\1\u01e5"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01e6"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u01e7"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\23\16\1\u01e8"+
    "\11\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u01e9"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u01ea"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01eb"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\13\16\1\u01ec"+
    "\21\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u01ed"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\25\16\1\u01ee"+
    "\7\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01ef"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u01f0"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u01f1"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\1\u01f2\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\u01f3\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u01f4\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\17\16\1\u01f5\15\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u01f6\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01f7\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\u01f8\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u01f9\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u01fa\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u01fb\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u01fc\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\u01fd\34\16\5\0"+
    "\3\16\6\0\1\16\6\0\13\16\1\u01fe\21\16\5\0"+
    "\3\16\6\0\1\16\6\0\13\16\1\u01ff\21\16\5\0"+
    "\3\16\6\0\1\16\6\0\7\16\1\u0200\25\16\5\0"+
    "\3\16\6\0\1\16\6\0\20\16\1\u0201\14\16\5\0"+
    "\3\16\6\0\1\16\6\0\1\u0202\34\16\5\0\3\16"+
    "\6\0\1\16\6\0\10\16\1\u0203\24\16\5\0\3\16"+
    "\6\0\1\16\6\0\1\u0204\34\16\5\0\3\16\6\0"+
    "\1\16\6\0\6\16\1\u0205\26\16\5\0\3\16\6\0"+
    "\1\16\6\0\14\16\1\u0206\20\16\5\0\3\16\6\0"+
    "\1\16\6\0\2\16\1\u0207\32\16\5\0\3\16\6\0"+
    "\1\16\6\0\1\u0208\34\16\5\0\3\16\6\0\1\16"+
    "\6\0\7\16\1\u0209\25\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\16\1\u020a\33\16\5\0\3\16\6\0\1\16"+
    "\6\0\10\16\1\u020b\24\16\5\0\3\16\6\0\1\16"+
    "\6\0\13\16\1\u020c\21\16\5\0\3\16\6\0\1\16"+
    "\6\0\1\u020d\34\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u020e\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u020f\24\16\5\0\3\16\6\0\1\16\6\0"+
    "\25\16\1\u0210\7\16\5\0\3\16\6\0\1\16\6\0"+
    "\5\16\1\u0211\27\16\5\0\3\16\6\0\1\16\6\0"+
    "\20\16\1\u0212\14\16\5\0\3\16\6\0\1\16\6\0"+
    "\11\16\1\u0213\23\16\5\0\3\16\6\0\1\16\6\0"+
    "\7\16\1\u0214\25\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u0215\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u0216\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\11\16\1\u0217\23\16\5\0\3\16\6\0\1\16\6\0"+
    "\2\16\1\u0218\32\16\5\0\3\16\6\0\1\16\6\0"+
    "\11\16\1\u0219\23\16\5\0\3\16\6\0\1\16\6\0"+
    "\13\16\1\u021a\21\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u021b\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\6\16\1\u021c\26\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u021d\24\16\5\0\3\16\6\0\1\16\6\0"+
    "\26\16\1\u021e\6\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u021f\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\11\16\1\u0220\23\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\16\1\u0221\33\16\5\0\3\16\6\0\1\16\6\0"+
    "\25\16\1\u0222\7\16\5\0\3\16\6\0\1\16\6\0"+
    "\11\16\1\u0223\23\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u0224\24\16\5\0\3\16\6\0\1\16\6\0"+
    "\10\16\1\u0225\24\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u0226\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\20\16\1\u0227\14\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\16\1\u0228\33\16\5\0\3\16\6\0\1\16\6\0"+
    "\21\16\1\u0229\13\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u022a\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u022b\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\2\16\1\u022c\32\16\5\0\3\16\6\0\1\16\6\0"+
    "\3\16\1\u022d\31\16\5\0\3\16\6\0\1\16\6\0"+
    "\14\16\1\u022e\20\16\5\0\3\16\6\0\1\16\6\0"+
    "\20\16\1\u022f\14\16\5\0\3\16\6\0\1\16\6\0"+
    "\12\16\1\u0230\22\16\5\0\3\16\6\0\1\16\6\0"+
    "\1\u0231\34\16\5\0\3\16\6\0\1\16\6\0\14\16"+
    "\1\u0232\20\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\u0233\22\16\5\0\3\16\6\0\1\16\6\0\20\16"+
    "\1\u0234\14\16\5\0\3\16\6\0\1\16\6\0\7\16"+
    "\1\u0235\25\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u0236\24\16\5\0\3\16\6\0\1\16\6\0\4\16"+
    "\1\u0237\30\16\5\0\3\16\6\0\1\16\6\0\12\16"+
    "\1\u0238\22\16\5\0\3\16\6\0\1\16\6\0\2\16"+
    "\1\u0239\32\16\5\0\3\16\6\0\1\16\6\0\20\16"+
    "\1\u023a\14\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u023b\24\16\5\0\3\16\6\0\1\16\6\0\5\16"+
    "\1\u023c\27\16\5\0\3\16\6\0\1\16\6\0\10\16"+
    "\1\u023d\24\16\5\0\3\16\6\0\1\16\6\0\2\16"+
    "\1\u023e\32\16\5\0\3\16\6\0\1\16\6\0\1\u023f"+
    "\34\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0240"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\6\16\1\u0241"+
    "\26\16\5\0\3\16\6\0\1\16\6\0\22\16\1\u0242"+
    "\12\16\5\0\3\16\6\0\1\16\6\0\7\16\1\u0243"+
    "\25\16\5\0\3\16\6\0\1\16\6\0\1\16\1\u0244"+
    "\33\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u0245"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u0246"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u0247"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\1\16\1\u0248"+
    "\33\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0249"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u024a"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u024b"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\6\16\1\u024c"+
    "\26\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u024d"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u024e"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u024f"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0250"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u0251"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0252"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u0253"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0254"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\13\16\1\u0255"+
    "\21\16\5\0\3\16\6\0\1\16\6\0\5\16\1\u0256"+
    "\27\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u0257"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\32\16\1\u0258"+
    "\2\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u0259"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\11\16\1\u025a"+
    "\23\16\5\0\3\16\6\0\1\16\6\0\1\16\1\u025b"+
    "\33\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u025c"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u025d"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u025e"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u025f"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u0260"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0261"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\12\16\1\u0262"+
    "\22\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0263"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u0264"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u0265"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\2\16\1\u0266"+
    "\32\16\5\0\3\16\6\0\1\16\6\0\20\16\1\u0267"+
    "\14\16\5\0\3\16\6\0\1\16\6\0\1\u0268\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u0269\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\2\16\1\u026a\32\16"+
    "\5\0\3\16\6\0\1\16\6\0\7\16\1\u026b\25\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u026c\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u026d\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\u026e\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u026f\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u0270\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u0271\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u0272\33\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\u0273\4\16\1\u0274"+
    "\27\16\5\0\3\16\6\0\1\16\6\0\6\16\1\u0275"+
    "\26\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0276"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\10\16\1\u0277"+
    "\24\16\5\0\3\16\6\0\1\16\6\0\3\16\1\u0278"+
    "\31\16\5\0\3\16\6\0\1\16\6\0\1\u0279\34\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u027a\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\12\16\1\u027b\22\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u027c\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\3\16\1\u027d\31\16"+
    "\5\0\3\16\6\0\1\16\6\0\20\16\1\u027e\14\16"+
    "\5\0\3\16\6\0\1\16\6\0\10\16\1\u027f\24\16"+
    "\5\0\3\16\6\0\1\16\6\0\14\16\1\u0280\20\16"+
    "\5\0\3\16\6\0\1\16\6\0\5\16\1\u0281\27\16"+
    "\5\0\3\16\6\0\1\16\6\0\2\16\1\u0282\32\16"+
    "\5\0\3\16\6\0\1\16\6\0\11\16\1\u0283\23\16"+
    "\5\0\3\16\6\0\1\16\6\0\1\16\1\u0284\33\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\3\11\1\1\1\11"+
    "\32\1\1\11\1\0\1\1\2\0\1\1\1\0\u0256\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private void imprimir(String descricao, String lexema) {
        System.out.println(lexema + " - " + descricao);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PascalAnalizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character: "+yytext()+" at line "+(yyline+1)+", column "+(yycolumn+1) );
            }
          case 145: break;
          case 2: 
            { imprimir("Simbolo Relacional", yytext());
            }
          case 146: break;
          case 3: 
            { imprimir("Simbolo Aritimetico", yytext());
            }
          case 147: break;
          case 4: 
            { 
            }
          case 148: break;
          case 5: 
            { imprimir("Numero Inteiro", yytext());
            }
          case 149: break;
          case 6: 
            { imprimir("Delimitador", yytext());
            }
          case 150: break;
          case 7: 
            { imprimir("Simbolo Terminal", yytext());
            }
          case 151: break;
          case 8: 
            { imprimir("Identificador", yytext());
            }
          case 152: break;
          case 9: 
            { imprimir("Sinal de Atrinuição", yytext());
            }
          case 153: break;
          case 10: 
            { imprimir("String", yytext());
            }
          case 154: break;
          case 11: 
            { imprimir("Comentario", yytext());
            }
          case 155: break;
          case 12: 
            { imprimir("Ponteiro", yytext());
            }
          case 156: break;
          case 13: 
            { imprimir("Palavra reservada do", yytext());
            }
          case 157: break;
          case 14: 
            { imprimir("Palavra reservada or", yytext());
            }
          case 158: break;
          case 15: 
            { imprimir("Palavra reservada of", yytext());
            }
          case 159: break;
          case 16: 
            { imprimir("Palavra reservada to", yytext());
            }
          case 160: break;
          case 17: 
            { imprimir("Palavra reservada in", yytext());
            }
          case 161: break;
          case 18: 
            { imprimir("Palavra reservada if", yytext());
            }
          case 162: break;
          case 19: 
            { imprimir("Numero Real", yytext());
            }
          case 163: break;
          case 20: 
            { imprimir("Palavra reservada and", yytext());
            }
          case 164: break;
          case 21: 
            { imprimir("Palavra reservada asm", yytext());
            }
          case 165: break;
          case 22: 
            { imprimir("Palavra reservada not", yytext());
            }
          case 166: break;
          case 23: 
            { imprimir("Palavra reservada nil", yytext());
            }
          case 167: break;
          case 24: 
            { imprimir("Palavra reservada div", yytext());
            }
          case 168: break;
          case 25: 
            { imprimir("Palavra reservada set", yytext());
            }
          case 169: break;
          case 26: 
            { imprimir("Palavra reservada shr", yytext());
            }
          case 170: break;
          case 27: 
            { imprimir("Palavra reservada shl", yytext());
            }
          case 171: break;
          case 28: 
            { imprimir("Palavra reservada mod", yytext());
            }
          case 172: break;
          case 29: 
            { imprimir("Palavra reservada end", yytext());
            }
          case 173: break;
          case 30: 
            { imprimir("Palavra reservada var", yytext());
            }
          case 174: break;
          case 31: 
            { imprimir("Modificadores far", yytext());
            }
          case 175: break;
          case 32: 
            { imprimir("Palavra reservada for", yytext());
            }
          case 176: break;
          case 33: 
            { imprimir("Palavra reservada xor", yytext());
            }
          case 177: break;
          case 34: 
            { imprimir("Modificadores name", yytext());
            }
          case 178: break;
          case 35: 
            { imprimir("Modificadores near", yytext());
            }
          case 179: break;
          case 36: 
            { imprimir("Modificadores read", yytext());
            }
          case 180: break;
          case 37: 
            { imprimir("Tipos_Reais real", yytext());
            }
          case 181: break;
          case 38: 
            { imprimir("Palavra reservada case", yytext());
            }
          case 182: break;
          case 39: 
            { imprimir("Tipos_Reais comp", yytext());
            }
          case 183: break;
          case 40: 
            { imprimir("Modificadores cvar", yytext());
            }
          case 184: break;
          case 41: 
            { imprimir("Tipos_Ordinarios char", yytext());
            }
          case 185: break;
          case 42: 
            { imprimir("Palavra reservada egin", yytext());
            }
          case 186: break;
          case 43: 
            { imprimir("Palavra reservada eles", yytext());
            }
          case 187: break;
          case 44: 
            { imprimir("Palavra reservada type", yytext());
            }
          case 188: break;
          case 45: 
            { imprimir("Palavra reservada then", yytext());
            }
          case 189: break;
          case 46: 
            { imprimir("Palavra reservada unit", yytext());
            }
          case 190: break;
          case 47: 
            { imprimir("Palavra reservada uses", yytext());
            }
          case 191: break;
          case 48: 
            { imprimir("Tipos_Ordinarios word", yytext());
            }
          case 192: break;
          case 49: 
            { imprimir("Palavra reservada with", yytext());
            }
          case 193: break;
          case 50: 
            { imprimir("Palavra reservada goto", yytext());
            }
          case 194: break;
          case 51: 
            { imprimir("Palavra reservada file", yytext());
            }
          case 195: break;
          case 52: 
            { imprimir("Tipos_Ordinarios byte", yytext());
            }
          case 196: break;
          case 53: 
            { imprimir("Palavra reservada array", yytext());
            }
          case 197: break;
          case 54: 
            { imprimir("Modificadores alias", yytext());
            }
          case 198: break;
          case 55: 
            { imprimir("Modificadores cdecl", yytext());
            }
          case 199: break;
          case 56: 
            { imprimir("Palavra reservada const", yytext());
            }
          case 200: break;
          case 57: 
            { imprimir("Palavra reservada until", yytext());
            }
          case 201: break;
          case 58: 
            { imprimir("Modificadores index", yytext());
            }
          case 202: break;
          case 59: 
            { imprimir("Tipos_Ordinarios int64", yytext());
            }
          case 203: break;
          case 60: 
            { imprimir("Modificadores write", yytext());
            }
          case 204: break;
          case 61: 
            { imprimir("Palavra reservada while", yytext());
            }
          case 205: break;
          case 62: 
            { imprimir("Palavra reservada label", yytext());
            }
          case 206: break;
          case 63: 
            { imprimir("Modificadores local", yytext());
            }
          case 207: break;
          case 64: 
            { imprimir("Modificadores far16", yytext());
            }
          case 208: break;
          case 65: 
            { imprimir("Modificadores break", yytext());
            }
          case 209: break;
          case 66: 
            { imprimir("Tipos_Ordinarios qword", yytext());
            }
          case 210: break;
          case 67: 
            { imprimir("Tipos_Reais double", yytext());
            }
          case 211: break;
          case 68: 
            { imprimir("Palavra reservada downto", yytext());
            }
          case 212: break;
          case 69: 
            { imprimir("Modificadores result", yytext());
            }
          case 213: break;
          case 70: 
            { imprimir("Palavra reservada record", yytext());
            }
          case 214: break;
          case 71: 
            { imprimir("Palavra reservada repeat", yytext());
            }
          case 215: break;
          case 72: 
            { imprimir("Modificadores static", yytext());
            }
          case 216: break;
          case 73: 
            { imprimir("Palavra reservada string", yytext());
            }
          case 217: break;
          case 74: 
            { imprimir("Modificadores strict", yytext());
            }
          case 218: break;
          case 75: 
            { imprimir("Modificadores stored", yytext());
            }
          case 219: break;
          case 76: 
            { imprimir("Tipos_Reais single", yytext());
            }
          case 220: break;
          case 77: 
            { imprimir("Modificadores export", yytext());
            }
          case 221: break;
          case 78: 
            { imprimir("Palavra reservada object", yytext());
            }
          case 222: break;
          case 79: 
            { imprimir("Palavra reservada inline", yytext());
            }
          case 223: break;
          case 80: 
            { imprimir("Palavra reservada foward", yytext());
            }
          case 224: break;
          case 81: 
            { imprimir("Modificadores pascal", yytext());
            }
          case 225: break;
          case 82: 
            { imprimir("Palavra reservada packed", yytext());
            }
          case 226: break;
          case 83: 
            { imprimir("Modificadores public", yytext());
            }
          case 227: break;
          case 84: 
            { imprimir("Modificadores helper", yytext());
            }
          case 228: break;
          case 85: 
            { imprimir("Modificadores dynamic", yytext());
            }
          case 229: break;
          case 86: 
            { imprimir("Modificadores default", yytext());
            }
          case 230: break;
          case 87: 
            { imprimir("Modificadores stdcall", yytext());
            }
          case 231: break;
          case 88: 
            { imprimir("Modificadores message", yytext());
            }
          case 232: break;
          case 89: 
            { imprimir("Modificadores cppdecl", yytext());
            }
          case 233: break;
          case 90: 
            { imprimir("Tipos_Ordinarios integer", yytext());
            }
          case 234: break;
          case 91: 
            { imprimir("Modificadores iocheck", yytext());
            }
          case 235: break;
          case 92: 
            { imprimir("Modificadores varargs", yytext());
            }
          case 236: break;
          case 93: 
            { imprimir("Modificadores virtual", yytext());
            }
          case 237: break;
          case 94: 
            { imprimir("Modificadores generic", yytext());
            }
          case 238: break;
          case 95: 
            { imprimir("Tipos_Ordinarios longint", yytext());
            }
          case 239: break;
          case 96: 
            { imprimir("Modificadores forward", yytext());
            }
          case 240: break;
          case 97: 
            { imprimir("Palavra reservada program", yytext());
            }
          case 241: break;
          case 98: 
            { imprimir("Modificadores private", yytext());
            }
          case 242: break;
          case 99: 
            { imprimir("Tipos_Ordinarios boolean", yytext());
            }
          case 243: break;
          case 100: 
            { imprimir("Modificadores absolute", yytext());
            }
          case 244: break;
          case 101: 
            { imprimir("Modificadores abstract", yytext());
            }
          case 245: break;
          case 102: 
            { imprimir("Modificadores noreturn", yytext());
            }
          case 246: break;
          case 103: 
            { imprimir("Modificadores register", yytext());
            }
          case 247: break;
          case 104: 
            { imprimir("Modificadores safecall", yytext());
            }
          case 248: break;
          case 105: 
            { imprimir("Tipos_Ordinarios smallint", yytext());
            }
          case 249: break;
          case 106: 
            { imprimir("Tipos_Ordinarios shortint", yytext());
            }
          case 250: break;
          case 107: 
            { imprimir("Tipos_Ordinarios cardinal", yytext());
            }
          case 251: break;
          case 108: 
            { imprimir("Modificadores continue", yytext());
            }
          case 252: break;
          case 109: 
            { imprimir("Tipos_Reais currency", yytext());
            }
          case 253: break;
          case 110: 
            { imprimir("Tipos_Reais extended", yytext());
            }
          case 254: break;
          case 111: 
            { imprimir("Modificadores external", yytext());
            }
          case 255: break;
          case 112: 
            { imprimir("Modificadores override", yytext());
            }
          case 256: break;
          case 113: 
            { imprimir("Modificadores overload", yytext());
            }
          case 257: break;
          case 114: 
            { imprimir("Tipos_Ordinarios wordbool", yytext());
            }
          case 258: break;
          case 115: 
            { imprimir("Tipos_Ordinarios longword", yytext());
            }
          case 259: break;
          case 116: 
            { imprimir("Tipos_Ordinarios longbool", yytext());
            }
          case 260: break;
          case 117: 
            { imprimir("Palavra reservada function", yytext());
            }
          case 261: break;
          case 118: 
            { imprimir("Modificadores platform", yytext());
            }
          case 262: break;
          case 119: 
            { imprimir("Tipos_Ordinarios bytebool", yytext());
            }
          case 263: break;
          case 120: 
            { imprimir("Modificadores assembler", yytext());
            }
          case 264: break;
          case 121: 
            { imprimir("Modificadores nodefault", yytext());
            }
          case 265: break;
          case 122: 
            { imprimir("Modificadores softfloat", yytext());
            }
          case 266: break;
          case 123: 
            { imprimir("Modificadores otherwise", yytext());
            }
          case 267: break;
          case 124: 
            { imprimir("Modificadores unaligned", yytext());
            }
          case 268: break;
          case 125: 
            { imprimir("Modificadores interrupt", yytext());
            }
          case 269: break;
          case 126: 
            { imprimir("Palavra reservada interface", yytext());
            }
          case 270: break;
          case 127: 
            { imprimir("Palavra reservada procedure", yytext());
            }
          case 271: break;
          case 128: 
            { imprimir("Modificadores protected", yytext());
            }
          case 272: break;
          case 129: 
            { imprimir("Modificadores published", yytext());
            }
          case 273: break;
          case 130: 
            { imprimir("Modificadores bitpacked", yytext());
            }
          case 274: break;
          case 131: 
            { imprimir("Tipos_Ordinarios qwordbool", yytext());
            }
          case 275: break;
          case 132: 
            { imprimir("Palavra reservada destructor", yytext());
            }
          case 276: break;
          case 133: 
            { imprimir("Modificadores deprecated", yytext());
            }
          case 277: break;
          case 134: 
            { imprimir("Modificadores specialize", yytext());
            }
          case 278: break;
          case 135: 
            { imprimir("Modificadores enumerator", yytext());
            }
          case 279: break;
          case 136: 
            { imprimir("Modificadores oldfpccall", yytext());
            }
          case 280: break;
          case 137: 
            { imprimir("Modificadores implements", yytext());
            }
          case 281: break;
          case 138: 
            { imprimir("Modificadores reintroduce", yytext());
            }
          case 282: break;
          case 139: 
            { imprimir("Palavra reservada constructor", yytext());
            }
          case 283: break;
          case 140: 
            { imprimir("Modificadores nostackframe", yytext());
            }
          case 284: break;
          case 141: 
            { imprimir("Modificadores experimental", yytext());
            }
          case 285: break;
          case 142: 
            { imprimir("Modificadores saveregisters", yytext());
            }
          case 286: break;
          case 143: 
            { imprimir("Modificadores unimplemented", yytext());
            }
          case 287: break;
          case 144: 
            { imprimir("Palavra reservada implementation", yytext());
            }
          case 288: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PascalAnalizer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PascalAnalizer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PascalAnalizer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
